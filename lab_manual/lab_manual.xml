<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<article>
  <articleinfo>
    <title>ELEC350: Communications Theory and Systems I</title>

    <subtitle>Laboratory Manual</subtitle>

    <revhistory>
      <revision>
        <revnumber>1.0</revnumber>

        <date>08 Mar 2013</date>

        <revremark>Updated for GNU Radio 3.6.3.</revremark>
      </revision>

      <revision>
        <revnumber>1.1</revnumber>

        <date>27 Jun 2013</date>

        <revremark>Updated for GNU Radio 3.6.5. The category structure was
        revised quite a bit from earlier versions so the text has been updated
        to reflect that.</revremark>
      </revision>

      <revision>
        <revnumber>1.2</revnumber>

        <date>4 Jul 2013</date>

        <revremark>Updated for GNU Radio 3.7.0. The category structure was
        revised yet again, text updated.</revremark>
      </revision>

      <revision>
        <revnumber>2.0</revnumber>

        <date>1 Sept 2014</date>

        <revremark>Updated for 2014 deleting Softrock, retaining 4 labs
        only</revremark>
      </revision>

      <revision>
        <revnumber>3.0</revnumber>

        <date>1 Jan 2017</date>

        <revremark>Updated text references to 2016 edition, clarified lab
        procedures and reformatted for readability</revremark>
      </revision>
    </revhistory>
  </articleinfo>

  <abstract>
    <title>Introduction</title>

    <para>This lab is meant to be a supplement to your ELEC350 class. It will
    provide you with a way to explore the concepts and techniques discussed in
    class in a more hands on way. In order to do this, we will be using <ulink
    url="http://gnuradio.org/redmine/projects/gnuradio/wiki/GNURadioCompanion">GNU
    Radio Companion</ulink>, a graphical tool used to create and execute
    signal processing flow graphs for Software Defined Radio. This is a very
    useful tool, not only for demonstrating existing communication methods,
    but also for experimenting and developing new methods, both in the
    academic and professional worlds. For more information on Software Defined
    Radio, have a look at this <ulink
    url="https://en.wikipedia.org/wiki/Software-defined_radio">Wikipedia</ulink>
    page, or speak to your professor or TA.</para>

    <para>The lab component of this course consists of several
    components:</para>

    <para><itemizedlist>
        <listitem>
          <para>Lab 1. GNU Radio Tutorials.</para>
        </listitem>

        <listitem>
          <para>Lab 2. <ulink
          url="http://en.wikipedia.org/wiki/Universal_Software_Radio_Peripheral">USRP</ulink>
          Tutorials and FM Receiver.</para>
        </listitem>

        <listitem>
          <para>Lab 3. Finding frame synchronization on the <ulink
          url="http://en.wikipedia.org/wiki/FLEX_(protocol)">FLEX</ulink>
          pager network using the USRP and GNU Radio.</para>
        </listitem>

        <listitem>
          <para>Lab 4. Pulse shaping and PSK</para>
        </listitem>

        <listitem>
          <para>Optional activity</para>

          <itemizedlist>
            <listitem>
              <para>Pass the amateur radio basic and advanced exams (contact
              Dr. Driessen)</para>
            </listitem>

            <listitem>
              <para>Decoding off-air signals not covered in the other lab
              activities.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist></para>

    <para>The deliverables are described at the beginning of each
    section.</para>

    <para>PLEASE NOTE: You are encouraged to work at your own pace, using the
    scheduled lab period as a time to get assistance from a TA or the course
    instructor.</para>
  </abstract>

  <section>
    <title>Lab 1. GNU Radio Tutorials</title>

    <para>The following tutorials were adapted from <ulink
    url="http://www.csun.edu/~skatz/katzpage/sdr_project/sdrproject.html">Dr.
    Sharlene Katz' SDR Project</ulink> website and updated for GNU Radio 3.7.
    They are designed to get you familiar with various aspects of the GNU
    Radio Companion. You will also learn some basic tuning and demodulation
    techniques.</para>

    <para>In addition to providing you with a great introduction to GNU Radio
    Companion, this material can also be used as a reference for future
    labs</para>

    <para>As you work through the material, try to keep these following
    questions in mind:</para>

    <itemizedlist>
      <listitem>
        <para>What do the different colors of input and output terminals
        represent?</para>
      </listitem>

      <listitem>
        <para>How is the computer's audio input/output hardware represented in
        GRC?</para>
      </listitem>

      <listitem>
        <para>What is the Throttle block for? When should it be used?</para>
      </listitem>

      <listitem>
        <para>How are block parameters linked to GUI controls?</para>
      </listitem>

      <listitem>
        <para>How is an AM signal demodulated into an audio signal?</para>
      </listitem>

      <listitem>
        <para>How is an SSB signal demodulated into an audio signal?</para>
      </listitem>

      <listitem>
        <para>What methods are used to tune to a desired signal?</para>
      </listitem>
    </itemizedlist>

    <para>To understand how these demodulation techniques work, please review
    the theory of <ulink url="./data/Theory_AM_SSB.pdf">AM and SSB
    signals</ulink>.</para>

    <para>Other tutorials are also available, see for example</para>

    <itemizedlist>
      <listitem>
        <para><ulink
        url="http://www.ettus.com/kb/detail/software-defined-radio-usrp-and-gnu-radio-tutorial-set">Video
        tutorials</ulink></para>
      </listitem>

      <listitem>
        <para><ulink url="http://files.ettus.com/tutorials/">Python and 5 GRC
        labs</ulink></para>
      </listitem>

      <listitem>
        <para><ulink
        url="http://gnuradio.org/redmine/projects/gnuradio/wiki/Tutorials">gnuradio.org
        tutorials</ulink></para>
      </listitem>

      <listitem>
        <para><ulink
        url="http://www.rtl-sdr.com/tutorial-creating-fm-receiver-gnuradio-rtl-sdr/?PageSpeed=noscript">Gnuradio
        and RTL-SDR USB stick</ulink></para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Deliverables</title>

      <itemizedlist>
        <listitem>
          <para>GRC file of AM transmitter and receiver as described in
          Tutorial 3A.</para>
        </listitem>

        <listitem>
          <para>GRC file of AM receiver with AGC as described in Tutorial
          3B.</para>
        </listitem>

        <listitem>
          <para>block diagram of AM receiver showing mathematical
          representation of signals at all points</para>
        </listitem>

        <listitem>
          <para>GRC file of SSB receiver using Weaver's method as described in
          Tutorial 4.</para>
        </listitem>

        <listitem>
          <para>block diagram of SSB receiver showing mathematical
          representation of signals at all points</para>
        </listitem>

        <listitem>
          <para>There are a number of questions included within the text.
          Written answers to these questions are not required, but an effort
          should be made to think about and answer these questions as they are
          encountered.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Tutorial 1: Using GNU Radio Companion</title>

      <?dbhtml stop-chunking?>

      <section>
        <title>Objectives</title>

        <para>GNU Radio Companion (GRC) is a graphical user interface that
        allows you to build GNU Radio flowgraphs. It is an excellent way to
        learn the basics of GNU Radio. This is the first in a series of
        tutorials that will introduce you to the use of GRC. In this tutorial
        you will learn how to:</para>

        <itemizedlist>
          <listitem>
            <para>launch the GNU Radio Companion (GRC) software.</para>
          </listitem>

          <listitem>
            <para>create and execute a GRC flowgraph.</para>
          </listitem>

          <listitem>
            <para>use basic blocks such as signal sources and graphical
            sinks.</para>
          </listitem>

          <listitem>
            <para>use the computer's audio hardware with GRC.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Launching GNU Radio Companion</title>

        <para>Launch GNU Radio companion by selecting
        Applications-&gt;Programming-&gt;GRC as shown in <xref
        linkend="GRC_Location" xrefstyle="select: label"/>.</para>

        <figure id="GRC_Location">
          <title>Location of GNU Radio Companion on lab computers</title>

          <graphic align="center" fileref="images/GRC_Location.png"
                   width="50%"/>
        </figure>

        <para>An untitled GRC window similar to <xref
        linkend="blank_flowgraph" xrefstyle="select: label"/> should
        open.</para>

        <figure id="blank_flowgraph">
          <title>Blank Gnu Radio Companion flowgraph</title>

          <screenshot>
            <graphic align="center" fileref="images/blank_flowgraph.png"
                     width="75%"/>
          </screenshot>
        </figure>
      </section>

      <section>
        <title>Configuring the Flowgraph</title>

        <para>The <emphasis>Options</emphasis> block sets some general
        parameters for the flow graph. Double-click on the
        <emphasis>Options</emphasis> block. You should now see a properties
        dialog similar to <xref linkend="options_properties"
        xrefstyle="select: label"/>.</para>

        <figure id="options_properties">
          <title>Properties dialog box for top block</title>

          <screenshot>
            <graphic align="center" fileref="images/options_properties.png"
                     width="50%"/>
          </screenshot>
        </figure>

        <itemizedlist>
          <listitem>
            <para>Leave the ID as "top_block".</para>
          </listitem>

          <listitem>
            <para>Enter "Tutorial 1" as the title.</para>
          </listitem>

          <listitem>
            <para>Enter your name as the Author.</para>
          </listitem>

          <listitem>
            <para>Set Generate Options to WX GUI.</para>

            <para>Note: This setting controls the way that GUIs are generated
            for flow graph output. Many of the output plots used in these labs
            will not be available if this option is set to the default QT
            GUI</para>
          </listitem>

          <listitem>
            <para>Set Run to Autostart, and Realtime Scheduling to Off.</para>
          </listitem>

          <listitem>
            <para>Click OK to close the properties dialog.</para>
          </listitem>

          <listitem>
            <para>The other block in the flowgraph is a <ulink
            url="http://www.ece.uvic.ca/~ece350/grc_doc/ar01s04s01.html">
            variable</ulink> block that sets the sample rate. Click on this
            block to see the variable name and value. The variable block will
            be discussed later in the tutorial.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Adding Blocks to the Flowgraph</title>

        <para>On the right side of the window is a list of the blocks that are
        available. By expanding any of the categories (click on triangle to
        the left) you can see the blocks available. Explore each of the
        categories so that you have an idea of what blocks are
        available.</para>

        <para>You can also click on the magnifying glass in the upper right
        side of the window and simply type a search term (e.g.
        <emphasis>receiver</emphasis>) to search all categories. A small text
        window will appear above the list of blocks in which your search term
        will be entered. This will filter the list leaving only blocks with
        <emphasis>receiver</emphasis> in their name. Try a few searches such
        as <emphasis>filter</emphasis> and <emphasis>source</emphasis> to see
        what comes up.</para>

        <itemizedlist>
          <listitem>
            <para>Open the <emphasis>Waveform Generators</emphasis> category
            and double-click on the <ulink
            url="http://www.ece.uvic.ca/~ece350/grc_doc/ar01s02s01.html">
            Signal Source</ulink>. Note that a <emphasis>Signal
            Source</emphasis> block will now appear in the main window.</para>
          </listitem>

          <listitem>
            <para>Double-click on the <emphasis>Signal Source</emphasis> block
            and the properties dialog will open. Adjust the settings to match
            those as shown in <xref linkend="signal_source_properties"
            xrefstyle="select: label"/> and close the dialog.</para>

            <figure id="signal_source_properties">
              <title>Properties dialog box for signal source</title>

              <screenshot>
                <graphic align="center"
                         fileref="images/signal_source_properties.png"
                         width="50%"/>
              </screenshot>
            </figure>

            <para>This <emphasis>Signal Source</emphasis> is now set to output
            a real-valued 1 kHz sinusoid with a peak amplitude of 0.5.</para>
          </listitem>

          <listitem>
            <para>In the flowgraph, the <emphasis>Signal Source</emphasis>
            block will have an orange output tab, representing a float (real)
            data type. If the block settings is chosen as complex instead of
            float, then the output tab will be blue. In order to view this
            wave we need one of the graphical sinks. Expand the
            <emphasis>Instrumentation</emphasis> category and then the
            <emphasis>WX</emphasis> subcategory.</para>
          </listitem>

          <listitem>
            <para>Double-click on the <emphasis>WX GUI Scope Sink</emphasis>.
            It should appear in the main window. Double-click on the block and
            change the <emphasis>Type</emphasis> to
            <emphasis>Float</emphasis>. Leave the other Parameters at their
            default values as shown in <xref linkend="scope_sink_properties"
            xrefstyle="select: label"/>. Click <emphasis>OK</emphasis> to
            close the properties dialog.</para>

            <para><figure id="scope_sink_properties">
                <title>Properties dialog box for scope sink</title>

                <screenshot>
                  <graphic align="center"
                           fileref="images/scope_sink_properties.png"
                           width="50%"/>
                </screenshot>
              </figure></para>
          </listitem>

          <listitem>
            <para>In order to connect these two blocks, click once on the
            <emphasis>out</emphasis> port of the <emphasis>Signal
            Source</emphasis>, and then once on the <emphasis>in</emphasis>
            port of the <emphasis>Scope Sink</emphasis>. The flow graph in
            <xref linkend="signal_source_scope_sink_only"
            xrefstyle="select: label"/> should be displayed.</para>

            <para><figure id="signal_source_scope_sink_only">
                <title>Flowgraph with signal source and scope sink</title>

                <screenshot>
                  <graphic align="center"
                           fileref="images/signal_source_scope_sink_only.png"
                           width="75%"/>
                </screenshot>
              </figure></para>
          </listitem>

          <listitem>
            <para>The problem with this flowgraph is that although the sample
            rate is set to 32000, there is no block which enforces this sample
            rate. Therefore, the flowgraph will consume as much of the
            computer's resources as it possibly can which can cause the GRC
            software to lock up. To fix this problem, disconnect the
            <emphasis>Signal Source</emphasis> from the <emphasis>WX GUI Scope
            Sink</emphasis> by clicking on the arrow and pressing the Delete
            key. Expand the <emphasis>Misc</emphasis> category and
            double-click on the <ulink
            url="http://www.ece.uvic.ca/~ece350/grc_doc/ar01s03s07.html">Throttle</ulink>.
            Connect this block between the <emphasis>Signal Source</emphasis>
            and the <emphasis>WX GUI Scope Sink</emphasis> as shown in <xref
            linkend="scope_source_scope_sink" xrefstyle="select: label"/>
            (click once on the out port of one block and the in port of the
            next block).</para>

            <para><figure id="scope_source_scope_sink">
                <title>Flowgraph with throttle added</title>

                <screenshot>
                  <graphic align="center"
                           fileref="images/signal_source_scope_sink.png"
                           width="75%"/>
                </screenshot>
              </figure></para>
          </listitem>

          <listitem>
            <para>Note that the input and output arrowheads will change to
            red. This indicates a problem with the flowgraph, in this case,
            the data types do not match. To fix the problem, double-click the
            <emphasis>Throttle</emphasis> and change the
            <emphasis>Type</emphasis> to <emphasis>Float</emphasis>.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Executing the Flowgraph</title>

        <para>In order to observe the operation of this simple system we must
        generate the flowgraph and then execute it.</para>

        <itemizedlist>
          <listitem>
            <para>Click first on the <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="images/generate.png"/>
                </imageobject>
              </inlinemediaobject> icon (or press F5) to generate the
            flowgraph.</para>
          </listitem>

          <listitem>
            <para>If the flowgraph has not yet been saved, a file dialog will
            appear when you click this button. Name this file
            <emphasis>tutorial1.grc</emphasis> and save it to a folder on your
            home drive. The generation stage converts your flowgraph into
            executable Python code.</para>
          </listitem>

          <listitem>
            <para>Click the <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="images/execute.png"/>
                </imageobject>
              </inlinemediaobject> icon (or press F6) to execute the
            flowgraph. The execution stage runs the Python code that was
            generated in the previous step. A scope plot should open
            displaying several cycles of the sinusoid. Confirm that the
            frequency and amplitude match the value that you expect. What is
            the period of one cycle of the sine wave, and thus what is the
            frequency? Experiment with the controls on the scope plot.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Working with the Scope Sink</title>

        <itemizedlist>
          <listitem>
            <para>Change the <emphasis>Channel Options / Marker</emphasis>
            setting to <emphasis>Dot Large</emphasis>. As shown in <xref
            linkend="scope_sink_dot_large" xrefstyle="select: label"/>, you
            can now see the actual sample values. Recall that the
            <emphasis>Variable</emphasis> block set the sampling rate to 32000
            samples/second or 32 samples/ms. Note that there are in fact 32
            samples within one cycle of the wave.</para>

            <para><figure id="scope_sink_dot_large">
                <title>Scope sink with large dot markers</title>

                <screenshot>
                  <graphic align="center"
                           fileref="images/scope_sink_dot_large.png"
                           width="75%"/>
                </screenshot>
              </figure></para>
          </listitem>

          <listitem>
            <para>Close the scope and reduce the sample rate to 10000 by
            double-clicking on the <emphasis>Variable</emphasis> block and
            entering 10e3 in the <emphasis>Value</emphasis> box. Note that you
            can use this exponential notation anywhere that GNURadio requires
            a number.</para>
          </listitem>

          <listitem>
            <para>Re-generate and execute the flow graph. Note that there are
            now fewer points per cycle. How low can you drop the sample rate?
            Recall that the Nyquist sampling theorem requires that we sample
            at more than two times the highest frequency. Experiment with this
            and see how the output changes as you drop below the Nyquist
            rate.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Working with the FFT Sink</title>

        <itemizedlist>
          <listitem>
            <para>The FFT Sink acts as a Spectrum Analyzer by doing a short
            time discrete Fourier transform (STFT). Review the <ulink
            url="data/Theory_Spectrum_Analyzer.pdf">theory of the Spectrum
            Analyzer</ulink></para>
          </listitem>

          <listitem>
            <para>Close the scope and change the sample rate back to 32000.
            Add a <emphasis>WX GUI FFT Sink</emphasis> (under
            <emphasis>Instrumentation-&gt;WX</emphasis>) to your window.
            Change the Type to Float and leave the remaining parameters at
            their default values.</para>
          </listitem>

          <listitem>
            <para>Connect this to the output of the <emphasis>Signal
            Source</emphasis> by clicking on the <emphasis>out</emphasis> port
            of the <emphasis>Throttle</emphasis> and then the
            <emphasis>in</emphasis> port of the <emphasis>WX GUI FFT
            Sink</emphasis>. Generate and execute the flow graph. You should
            observe the scope as before along with an FFT plot correctly
            showing the frequency of the input at 1KHz. Close the output
            windows.</para>
          </listitem>

          <listitem>
            <para>Explore other graphical sinks (<emphasis>WX GUI Number
            Sink</emphasis>, <emphasis>WX GUI Waterfall Sink</emphasis>, and
            <emphasis>WX GUI Histo Sink</emphasis>) to see how they display
            the <emphasis>Signal Source</emphasis></para>

            <itemizedlist>
              <listitem>
                <para>The number sink is typically used to monitor
                slowly-changing signals such as the RMS input level. In this
                example, the sine wave changes too fast for the numbers to
                keep up.</para>
              </listitem>

              <listitem>
                <para>The waterfall sink is used to display amplitude vs.
                frequency vs. time with amplitude represented as a variation
                in color. The waterfall is a time frequency diagram with time
                on the vertical axis. Note that for a single 1 Khz sine wave
                input, the frequency does not change with time, thus a
                vertical line is displayed at 1 Khz.</para>
              </listitem>

              <listitem>
                <para>The histo sink displays a histogram of the input values,
                which can be used to monitor the symbol distribution in a
                digital signal or the distribution of a noise source.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Working with Audio I/O</title>

        <itemizedlist>
          <listitem>
            <para>Create the flow graph shown in <xref
            linkend="signal_source_fft_sink_audio_sink"
            xrefstyle="select: label"/>.</para>

            <para><figure id="signal_source_fft_sink_audio_sink">
                <title>Flow graph for audio I/O demonstration</title>

                <screenshot>
                  <graphic align="center"
                           fileref="images/signal_source_fft_sink_audio_sink.png"
                           width="75%"/>
                </screenshot>
              </figure></para>
          </listitem>

          <listitem>
            <para>The <emphasis>Audio Sink</emphasis> is found in the
            <emphasis>Audio</emphasis> category. The <ulink
            url="http://www.ece.uvic.ca/~ece350/grc_doc/ar01s05s03.html">
            Audio Sink</ulink> block directs the signal to the audio card of
            your computer. Note that the sample rate is set to 48000, a sample
            rate that is usually, but not always supported by computer audio
            hardware. 44100 is supported by every sound card. Other
            commonly-supported rates are 8000, 11025 and 22050. Some audio
            hardware may support higher rates such as 88200 and 96000. Also
            note that there is no <emphasis>Throttle</emphasis> block. This is
            because the audio hardware enforces the desired sample rate by
            only accepting samples at this rate.</para>

            <para><itemizedlist>
                <listitem>
                  <para>It is worth noting that sample rates, especially
                  related to audio output are a common source of frustration
                  in these labs so it is worth spending some time to ensure
                  the concepts are understood here. More information about how
                  GNU Radio communicates with the computer's audio hardware
                  can be found <ulink
                  url="http://gnuradio.org/redmine/projects/gnuradio/wiki/ALSAPulseAudio#Solution">here</ulink></para>
                </listitem>
              </itemizedlist></para>
          </listitem>

          <listitem>
            <para>Generate and execute this flow graph. The graphical display
            of the scope and FFT should open as before. However, now you
            should also hear the 1 kHz tone. If you do not hear the tone,
            ensure that the output from the computer is connected to the
            speakers and that the volume is turned up. Experiment with
            changing both the overall sample rate in the flow graph as well as
            the sample rate in the audio sink to see how the tone is
            affected.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Math Operations</title>

        <itemizedlist>
          <listitem>
            <para>Construct the flow graph in <xref linkend="add_sinusoids"
            xrefstyle="select: label"/>. Set the sample rate to 32000. The two
            Signal Sources should have frequencies of 1000 and 800,
            respectively. The <ulink
            url="http://www.ece.uvic.ca/~ece350/grc_doc/ar01s08s01.html">
            Add</ulink> block is found in the <emphasis>Math
            Operators</emphasis> category.</para>

            <para><figure id="add_sinusoids">
                <title>Flow graph with Add block</title>

                <screenshot>
                  <graphic align="center" fileref="images/add_sinusoids.png"
                           width="75%"/>
                </screenshot>
              </figure></para>
          </listitem>

          <listitem>
            <para>Generate and execute the flow graph. On the Scope plot you
            should observe a waveform corresponding to the sum of two
            sinusoids. On the FFT plot you should see components at both 800
            and 1000 Hz. Unfortunately, the FFT plot does not provide enough
            resolution to clearly see the two distinct components. Note that
            the maximum frequency displayed on this plot is 16 kHz. This is
            one-half of the 32 kHz sample rate. In order to obtain better
            resolution, we can lower the sample rate. Try lowering the sample
            rate to 10 kHz. Recall that for an FFT, the frequency resolution
            <emphasis>f0=fs/N</emphasis> where <emphasis>fs</emphasis> is the
            sample rate and <emphasis>N</emphasis> is the FFT block size. Thus
            for fixed value of <emphasis>N</emphasis>, <emphasis>f0</emphasis>
            goes down as <emphasis>fs</emphasis> goes down.</para>
          </listitem>

          <listitem>
            <para>Replace the <emphasis>Add</emphasis> block with a <ulink
            url="http://www.ece.uvic.ca/~ece350/grc_doc/ar01s08s04.html">
            Multiply</ulink> block. What output do you expect from the product
            of two sinusoids? Confirm your result on the Scope and FFT
            displays.</para>
          </listitem>

          <listitem>
            <para>Take note of the other math operations under the
            <emphasis>Math Operators</emphasis> category and experiment with a
            few to see if the result is as expected.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Filters</title>

        <itemizedlist>
          <listitem>
            <para>Modify the flow graph to include a <ulink
            url="http://www.ece.uvic.ca/~ece350/grc_doc/ar01s12s01.html"> Low
            Pass Filter</ulink> block as shown in <xref
            linkend="lowpass_filter" xrefstyle="select: label"/>. This block
            is found in the <emphasis>Filters</emphasis> category and is the
            first Low Pass Filter listed.</para>

            <para><figure id="lowpass_filter">
                <title>Flow graph with Multiply and Low Pass Filter
                blocks</title>

                <screenshot>
                  <graphic align="center" fileref="images/lowpass_filter.png"
                           width="75%"/>
                </screenshot>
              </figure></para>
          </listitem>

          <listitem>
            <para>Recall that the Multiply block outputs a 200 Hz and a 1.8
            kHz sinusoid. We want to create a filter that will pass the 200 Hz
            and block the 1.8 kHz component. This can be done with a low pass
            filter, whose frequency response is shown in <xref
            linkend="transition_band" xrefstyle="select: label"/>.
            Double-click the block to open the properties dialog. Set the low
            pass filter to have a cutoff frequency of 1 kHz and a transition
            width of 200 Hz.</para>

            <para><figure id="transition_band">
                <title>Frequency response of a low pass filter</title>

                <screenshot>
                  <graphic align="center" fileref="images/transition_band.gif"
                           width="75%"/>
                </screenshot>
              </figure></para>

            <para>Select the <emphasis>FIR Type</emphasis> to be
            <emphasis>Float-&gt;Float (Decimating)</emphasis>.</para>
          </listitem>

          <listitem>
            <para>Generate and execute the flow graph. You should observe that
            only the 200 Hz component passes through the filter and the 1.8
            KHz component is attenuated. How many dB down is the 1.8. KHz wave
            compared to the 200 Hz wave? Experiment with the High Pass
            Filter.</para>
          </listitem>

          <listitem>
            <para>Using the same flow graph, change the sample rate variable
            to 20000. Change the Decimation in the Low Pass Filter to 2.
            Decimation decreases the number of samples that are processed. A
            decimation factor of two means that the output of the filter will
            have a sample rate equal to one-half of the input sample rate, or
            in this case only 10000 samples/sec. This is a sufficient sample
            rate for the frequencies that we are dealing with. Generate and
            execute the flow graph. What frequency do you observe on the FFT?
            Measure it precisely by letting the cursor hover over the peak of
            the observed component.,</para>
          </listitem>

          <listitem>
            <para>You should have observed that the FFT is now measuring a
            signal around 400 Hz, rather than the expected 200Hz. Why is this
            error occurring? It is because the sample rate on the FFT has not
            been adjusted to properly measure its input. Double-click on the
            FFT Sink block and change the sample rate to samp_rate/2. Generate
            and execute the flow graph. You should now read the correct
            frequency. <emphasis role="bold">It is important to be aware of
            the sample rate in each branch of your flowgraph.</emphasis>
            Decimation and Interpolation options decrease and increase the
            sample rate respectively.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Running Generated Python Code</title>

        <itemizedlist>
          <listitem>
            <para>Open a file browser by going to Places-&gt;Home Folder as
            shown in <xref linkend="home_folder"
            xrefstyle="select: label"/>.</para>

            <para><figure id="home_folder">
                <title>Location of file browser</title>

                <screenshot>
                  <graphic align="center" fileref="images/home_folder.png"
                           width="30%"/>
                </screenshot>
              </figure></para>
          </listitem>

          <listitem>
            <para>Browse to the directory that contains the GRC file that you
            have been working on. If you are unsure as to where this is, the
            path to this file is shown in the bottom portion of the GRC
            window. In addition to saving a ".grc" file with your flow graph,
            note that there is also a file titled "top_block.py", as shown in
            <xref linkend="python_code" xrefstyle="select: label"/>. This is
            the Python file that is generated by GRC. It is this file that is
            being run when you execute the flow graph.</para>

            <para><figure id="python_code">
                <title>Each flow graph has an associated GRC and Python
                file</title>

                <screenshot>
                  <graphic align="center" fileref="images/python_code.png"
                           width="50%"/>
                </screenshot>
              </figure></para>
          </listitem>

          <listitem>
            <para>Double-click on this file. You will be given the option to
            Run or Display this file (see <xref linkend="python_code_run"
            xrefstyle="select: label"/>).</para>

            <para><figure id="python_code_run">
                <title>Run or display dialog prompt</title>

                <screenshot>
                  <graphic align="center" fileref="images/python_code_run.png"
                           width="50%"/>
                </screenshot>
              </figure></para>
          </listitem>

          <listitem>
            <para>Select Display. You can modify this file and run it from the
            terminal window. This allows you to use features that are not
            included in GRC. Keep in mind that every time you run your flow
            graph in GRC, it will overwrite the Python script that is
            generated. So, if you make changes directly in the Python script
            that you want to keep, save it under another name.</para>
          </listitem>

          <listitem>
            <para>To learn more about writing flowgraphs directly in Python,
            see this <ulink
            url="http://gnuradio.org/redmine/projects/gnuradio/wiki/TutorialsWritePythonApplications#A-first-working-code-example">code
            example</ulink>.</para>
          </listitem>

          <listitem>
            <para>It is possible to change the file name of the generated
            Python code by changing the <emphasis>ID</emphasis> field in the
            flowgraph's <emphasis>Options</emphasis> block.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Conclusions</title>

        <para>In this tutorial, you have learned several of the basic concepts
        in using GRC. Make a brief list of these concepts. When you are
        comfortable with this material, feel free to move on to tutorial
        2.</para>
      </section>
    </section>

    <section>
      <title>Tutorial 2: Variables and Controls</title>

      <?dbhtml stop-chunking?>

      <section>
        <title>Objectives</title>

        <para>This tutorial illustrates some of the features available in GNU
        Radio Companion when using WX GUI, such as sliders and other variable
        input options. It is valuable to keep in mind while working through
        this material that the visual flow graph is just a wrapper for the
        underlying python code, and that the choosers and sliders represent
        variables in the code.</para>

        <para>In this tutorial you will learn how to: <itemizedlist>
            <listitem>
              <para>add GUI controls such as sliders and radio buttons to your
              flowgraph.</para>
            </listitem>

            <listitem>
              <para>use variables to connect controls to different flowgraph
              parameters.</para>
            </listitem>
          </itemizedlist></para>
      </section>

      <section>
        <title>Working with Sliders</title>

        <itemizedlist>
          <listitem>
            <para>Launch GRC as done in the previous tutorial. If GRC is
            already open, simply create a new flowgraph by selecting
            File-&gt;New.</para>
          </listitem>

          <listitem>
            <para>Construct the flow graph shown in <xref
            linkend="tutorial2_fft_sink" xrefstyle="select: label"/>. Note
            that the sample rate is set to 48000 in this example.</para>

            <para><figure id="tutorial2_fft_sink">
                <title>Flow graph with WX GUI FFT sink</title>

                <screenshot>
                  <graphic align="center"
                           fileref="images/tutorial2_fft_sink.png" width="75%"/>
                </screenshot>
              </figure></para>
          </listitem>

          <listitem>
            <para>Execute the flow graph. You should hear the composite tone
            and see the FFT sink display of the spectrum. Experiment with the
            FFT size in the FFT sink. It should be a power of two. Note that
            as you increase the FFT size the resolution of the display
            increases. Reset the FFT size to 1024 when you are done.</para>
          </listitem>

          <listitem>
            <para>Add a <emphasis>WX GUI Slider</emphasis> (from the
            <emphasis>GUI Widgets-&gt;WX</emphasis> category) to the flow
            graph. Double-click on the block and set the parameters as shown
            in <xref linkend="slider_properties"
            xrefstyle="select: label"/>.</para>

            <para><figure id="slider_properties">
                <title>Properties of the WX GUI Slider</title>

                <screenshot>
                  <graphic align="center"
                           fileref="images/slider_properties.png" width="50%"/>
                </screenshot>
              </figure></para>
          </listitem>

          <listitem>
            <para>The ID box is the name of the variable that will be used to
            assign control. The Label box is optional. If filled, it will be
            used as a label for the controller in the output display.</para>
          </listitem>

          <listitem>
            <para>Execute the flow graph. This time when the FFT sink display
            opens you will see a horizontal slider at the top. Move the slider
            back and forth to change the value of freq2 between 10 and 2000.
            You should observe that this does not change the spectrum or the
            sound. This is because freq2 has not been assigned to control
            anything.</para>
          </listitem>

          <listitem>
            <para>Double-click on the bottom <emphasis>Signal
            Source</emphasis> (the one set to 800 Hz). Replace the frequency
            (800) with freq2. Execute the flow graph. You should now observe
            that both the spectrum and the sound change as you vary the
            frequency of the Signal Source using the slider.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Working with Text Boxes</title>

        <itemizedlist>
          <listitem>
            <para>Add a <emphasis>WX GUI Text Box</emphasis> to the flow graph
            (<emphasis>GUI Widgets-&gt;WX</emphasis> category). Set the
            parameters as shown in <xref linkend="textbox_properties"
            xrefstyle="select: label"/>.</para>

            <para><figure id="textbox_properties">
                <title>Figure 1.18: Properties of the WX GUI Text Box</title>

                <screenshot>
                  <graphic align="center"
                           fileref="images/textbox_properties.png" width="50%"/>
                </screenshot>
              </figure></para>
          </listitem>

          <listitem>
            <para>Double-click on the bottom Signal Source and replace the
            Amplitude (0.5) with the variable, level2. Execute the flow graph.
            Note that a text box will now appear in the display. The default
            value of 0.5 will be entered. Change the value to 0.1 followed by
            Enter. The volume of the 800 Hz tone will decrease and this will
            be reflected on the spectrum plot. Do not vary the level above
            1.0.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Working with Choosers</title>

        <itemizedlist>
          <listitem>
            <para>Add a <emphasis>WX GUI Chooser</emphasis> block to the flow
            graph. This block will add either a drop down menu, radio buttons
            or a button. Input the parameters as shown in <xref
            linkend="chooser_properties" xrefstyle="select: label"/>.</para>

            <para><figure id="chooser_properties">
                <title>Properties of the WX GUI Chooser</title>

                <screenshot>
                  <graphic align="center"
                           fileref="images/chooser_properties.png" width="50%"/>
                </screenshot>
              </figure></para>
          </listitem>

          <listitem>
            <para>Change the Frequency of the top Signal Source (1 kHz) to
            freq1. Execute the flow graph and change the frequency of the top
            Signal Source using the radio buttons. Experiment with the Drop
            Down menu and the Button to see how they work.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Working with Notebooks</title>

        <itemizedlist>
          <listitem>
            <para>Add a <emphasis>WX GUI Notebook</emphasis> block to the flow
            graph. This control allows you to arrange large GUI components
            (scope, FFT, waterfall, etc) into a tabbed notebook.</para>
          </listitem>

          <listitem>
            <para>Set the <emphasis>ID</emphasis> field to notebook_0 (this
            should be the default). Set the <emphasis>Labels</emphasis> field
            to ['Scope', 'Spectrum']. Note that this field is entered in
            Python list syntax and is expecting a list of strings. The square
            brackets indicate the list while the single quotes indicate the
            string. The comma is the separator between list items.</para>
          </listitem>

          <listitem>
            <para>Add a <emphasis>WX GUI Scope Sink</emphasis> to the
            flowgraph and connect it to the output of the
            <emphasis>Throttle</emphasis> block. Double click this block and
            set the <emphasis>Type</emphasis> to <emphasis>Float</emphasis>
            and set the <emphasis>Notebook</emphasis> to
            <emphasis>notebook_0,0</emphasis>, where notebook_0 indicates the
            notebook control where you would like the element to appear and
            the second 0 indicates the list index of the label you would like
            it to appear under. In this case, 0 points to the list index of
            'Scope'. Close the properties dialog.</para>
          </listitem>

          <listitem>
            <para>Double click the <emphasis>WX GUI FFT Sink</emphasis> to
            open the properties dialog. Set the <emphasis>Notebook</emphasis>
            to <emphasis>notebook_0,1</emphasis>. The 1 points to the list
            index of 'Spectrum' that was configured in the
            <emphasis>Labels</emphasis> field of notebook_0. Close the
            properties dialog.</para>
          </listitem>

          <listitem>
            <para>Execute the flowgraph. The scope and FFT views should now be
            visible on separate tabs labeled "Scope" and "Spectrum"
            repsectively.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Conclusions</title>

        <para>In this tutorial you have learned how to add GUI controls to
        your flowgraph and how to use them to control different parameters of
        the flowgraph. These skills will be useful when creating a tunable AM
        receiver in the next tutorial. When you feel comfortable with this
        material, please feel free to move on to Tutorial 3.</para>
      </section>
    </section>

    <section>
      <title>Tutorial 3A: AM Signal waveforms</title>

      <?dbhtml stop-chunking?>

      <section>
        <title>Objectives</title>

        <para>This tutorial is a guide to AM signal waveforms. In this
        tutorial you will learn: <itemizedlist>
            <listitem>
              <para>Theory and equations of AM signals and the complex
              mixer</para>
            </listitem>

            <listitem>
              <para>How to construct an AM transmitter flowgraph to generate
              an AM waveform with a sinusoidal message and observe the
              waveform and spectrum</para>
            </listitem>

            <listitem>
              <para>Construction of AM transmitter flowgraphs with square wave
              and pseudo-random data messages</para>
            </listitem>

            <listitem>
              <para>AM receivers are covered in the next Tutorial 3B</para>
            </listitem>
          </itemizedlist></para>
      </section>

      <section>
        <title>AM flowgraphs</title>

        <itemizedlist>
          <listitem>
            <para>Review the theory in the <ulink
            url="./data/35015-PSK-FSK-12.pdf">AM transmitter theory</ulink>
            section 2.1.</para>
          </listitem>

          <listitem>
            <para>Using the following GRC files as a starting point:
            <itemizedlist>
                <listitem>
                  <para><ulink url="data/AM_TX.grc">AM_TX.grc</ulink></para>
                </listitem>

                <listitem>
                  <para><ulink
                  url="data/different_waveforms.grc">different_waveforms.grc</ulink></para>
                </listitem>
              </itemizedlist></para>

            <para>Carry out the steps in the <ulink
            url="data/AM_procedures_TX.pdf">AM Transmitter
            procedures</ulink></para>
          </listitem>

          <listitem>
            <para>Start GRC as was done in the previous tutorials. If GRC is
            already open, open the .grc files by selecting File-&gt;Open, or
            clicking on the Open logo, <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="images/open_logo.png"/>
                </imageobject>
              </inlinemediaobject></para>
          </listitem>

          <listitem>
            <para>If you are unsure of the functionality of any of the blocks
            in the linked tutorial, please consult the <ulink
            url="http://www.ece.uvic.ca/~ece350/grc_doc/">Documentation</ulink>
            , or ask your TA.</para>
          </listitem>

          <listitem>
            <para>Questions to be answered during the lab
            <itemizedlist>
                <listitem>
                  <para>For an AM signal as written in the text section 2.1
                  page 35, what is the acceptable range of the parameter k_a
                  so that the message can be recovered perfectly in the
                  receiver?</para>
                </listitem>

                <listitem>
                  <para>Sketch the spectrum of an AM signal with a message
                  signal that is the sum of two cosine waves. Repeat for a
                  message signal that is the product of two cosine
                  waves.</para>
                </listitem>

                <listitem>
                  <para>What is the cutoff frequency of the low pass filter
                  used in a synchronous AM receiver (where the received signal
                  is multiplied with the carrier waveform and lowpass
                  filtered).</para>
                </listitem>

                <listitem>
                  <para>Consider a signal with sampling rate of 256KHz. We use
                  rational resampler block with decimation factor of 3 and
                  interpolation factor of 4. What would be the new sampling
                  rate of the signal?</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>Tutorial 3B: Receiving AM Signals</title>

      <?dbhtml stop-chunking?>

      <section>
        <title>Objectives</title>

        <para>This tutorial is a guide to building a practical AM receiver for
        receiving real AM signals. In section 2.5.2 you will learn how to
        demodulate an AM signal using only real signals. A data file with one
        AM signal, which was generated using the flowgraphs in section 3A,
        will be used.</para>

        <para>In section 2.5.2, a data file will be used that contains several
        seconds of recorded signals from the AM broadcast band. In this
        section you will learn how to: <itemizedlist>
            <listitem>
              <para>use a pre-recorded file as the input to your
              flowgraph.</para>
            </listitem>

            <listitem>
              <para>tune to a specific (desired) AM signal on a given carrier
              frequency.</para>
            </listitem>

            <listitem>
              <para>filter out the undesired signals using other (different)
              carrier frequencies.</para>
            </listitem>

            <listitem>
              <para>demodulate the desired AM signal using complex
              signals.</para>
            </listitem>
          </itemizedlist></para>
      </section>

      <section>
        <title>Real signals, basic AM receiver</title>

        <itemizedlist>
          <listitem>
            <para>Review the <ulink url="data/AM_theory_RX.pdf">theory of AM
            receivers using real signals</ulink></para>
          </listitem>

          <listitem>
            <para>Using the following file as a starting point:</para>

            <para><ulink url="data/AM_PB_RX.grc">AM_PB_RX.grc</ulink></para>

            <para>Carry out the steps in the <ulink
            url="data/AM_procedures_RX.pdf">AM receiver
            procedures</ulink></para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Complex signals, receiver with channel selection
        (tuning)</title>

        <itemizedlist>
          <listitem>
            <para>Review the <ulink url="data/35015-PSK-FSK-12.pdf">theory of
            AM receivers using complex signals</ulink> section 3.2.</para>
          </listitem>

          <listitem>
            <para>Click on the link below to download the data file used in
            this section. Save it in a location that you can access later.
            This file was created using a USRP receiver.</para>

            <itemizedlist>
              <listitem>
                <para><ulink
                url="data/am_usrp710.dat">am_usrp710.dat</ulink></para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>Start GRC as was done in the previous tutorials. If GRC is
            already open, simply create a new flowgraph by selecting
            File-&gt;New.</para>
          </listitem>
        </itemizedlist>

        <section>
          <title>Playing a Data File</title>

          <itemizedlist>
            <listitem>
              <para>Construct the flow graph shown in <xref
              linkend="am_data_file" xrefstyle="select: label"/> consisting of
              a <ulink
              url="http://www.ece.uvic.ca/~ece350/grc_doc/ar01s07s03.html">
              File Source</ulink>, <emphasis>Throttle</emphasis>, and
              <emphasis>WX GUI FFT Sink</emphasis>. Set the sample rate in the
              variable block to 256000. This is the rate at which the saved
              data was sampled.</para>

              <para><figure id="am_data_file">
                  <title>Complex Flow graph with a File Source block</title>

                  <screenshot>
                    <graphic align="center" fileref="images/am_data_file.png"
                             width="50%"/>
                  </screenshot>
                </figure></para>
            </listitem>

            <listitem>
              <para>Double-click on the <emphasis>File Source</emphasis>
              block. Click on the ellipsis (…) next to the
              <emphasis>File</emphasis> entry box. Locate the am_usrp710.dat
              file that you saved in the previous step. The path to your file
              will appear as shown in <xref linkend="file_source_dialog"
              xrefstyle="select: label"/>. Set the <emphasis>Output
              Type</emphasis> to <emphasis>Complex</emphasis>. The use of
              complex data to describe and process waveforms in SDR will be
              discussed in the next tutorial. Set <emphasis>Repeat</emphasis>
              to <emphasis>Yes</emphasis>. This will cause the data to repeat
              so that you have a continuously playing signal.</para>

              <para><figure id="file_source_dialog">
                  <title>Properties of the File Source block</title>

                  <screenshot>
                    <graphic align="center"
                             fileref="images/file_source_dialog.png"
                             width="50%"/>
                  </screenshot>
                </figure></para>
            </listitem>

            <listitem>
              <para>Save and execute the flow graph. You should observe an FFT
              display similar to the one shown in <xref linkend="am_fft"
              xrefstyle="select: label"/>. You may need to click on
              <emphasis>Autoscale</emphasis> button to scale the data as
              shown. Note the following: <itemizedlist>
                  <listitem>
                    <para>This data was recorded with a USRP set to 710KHz.
                    Thus, the signal you see at the center (indicated as 0
                    KHz) is actually at 710 KHz. Similarly, the signal at 80
                    KHz is actually at 710KHz + 80KHz = 790KHz.</para>
                  </listitem>

                  <listitem>
                    <para>The display spans a frequency range from just below
                    -120KHz to just above 120KHz. This exact span is 256KHz,
                    which corresponds to the sample rate that the data was
                    recorded at.</para>
                  </listitem>

                  <listitem>
                    <para>The peaks that you observe on this display
                    correspond to the carriers for AM broadcast signals. You
                    should also be able to observe the sidebands for the
                    stronger waveforms.</para>
                  </listitem>
                </itemizedlist></para>

              <para><figure id="am_fft">
                  <title>AM signals in frequency domain</title>

                  <screenshot>
                    <graphic align="center" fileref="images/am_fft.png"
                             width="75%"/>
                  </screenshot>
                </figure></para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Frequency Display Resolution</title>

          <para>In this step we will expand the frequency scale on the FFT
          display so that you can view the signals with greater resolution.
          Recall from the previous tutorial that the span of the frequency
          axis is determined by the sample rate (256 kHz for this file). While
          we cannot change the original data, we can resample it to either
          increase or decrease the sample rate. We will decrease the sample
          rate by using decimation. Modify the flow graph as follows:</para>

          <itemizedlist>
            <listitem>
              <para>Add a <emphasis>Variable</emphasis> block (under
              <emphasis>Variables</emphasis> category). Set the ID to
              resamp_factor and the Value to 4 as shown in <xref
              linkend="resamp_factor" xrefstyle="select: label"/>.</para>

              <para><figure id="resamp_factor">
                  <title>Properties of the Variable block</title>

                  <screenshot>
                    <graphic align="center" fileref="images/resamp_factor.png"
                             width="50%"/>
                  </screenshot>
                </figure></para>
            </listitem>

            <listitem>
              <para>Add the <emphasis>Rational Resampler</emphasis> block from
              the <emphasis>Filters</emphasis> menu as shown below. Set its
              decimation factor to resamp_factor. It will use the value of the
              variable set in the previous step (4) to decimate the incoming
              data. That means that it will divide the incoming data rate by
              the decimation factor. In this example, the incoming 256K
              samp/sec data will be converted down to 256K/4 = 64K
              samp/sec.</para>
            </listitem>

            <listitem>
              <para>Note that the <emphasis>Throttle</emphasis> and
              <emphasis>FFT Sink</emphasis> now need their sample rates
              changed to correspond to this new rate. Change the sample rate
              in both of these blocks to samp_rate/resamp_factor. Now we can
              change the decimation factor in the
              <emphasis>Variable</emphasis> block and it will be reflected in
              each of the other blocks automatically.</para>
            </listitem>

            <listitem>
              <para>Your flow graph should now appear as shown in <xref
              linkend="fft_decim_graph" xrefstyle="select: label"/>.</para>

              <para><figure id="fft_decim_graph">
                  <title>Complex flow graph with Rational Resampler
                  included</title>

                  <screenshot>
                    <graphic align="center"
                             fileref="images/fft_decim_graph.png" width="75%"/>
                  </screenshot>
                </figure></para>
            </listitem>

            <listitem>
              <para>Execute the new flow graph. You should now observe a
              frequency span of only 64 kHz (-32 kHz to +32 kHz). What actual
              frequency range does this correspond to?</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Selecting one channel by filtering</title>

          <para>The bandwidth of an AM broadcast signal is 10 kHz (+/- 5 kHz
          from the carrier frequency). You may find it useful to click the
          <emphasis>Stop</emphasis> button on the FFT plot to see this more
          clearly. Also, note that many stations also include additional
          information outside of the 10 kHz bandwidth.</para>

          <para>In order to select the station at 710 kHz (0 kHz on the FFT
          display) we need to insert a filter to eliminate all but the one
          station that we want to receive. This is often referred to as a
          channel filter. Since the station at 710 kHz has been moved to 0 kHz
          (in the USRP) we will use a low pass filter. The station bandwidth
          is 10 kHz, so we will use a low pass filter that cuts off at 5
          kHz.</para>

          <itemizedlist>
            <listitem>
              <para>Insert the <ulink
              url="http://www.ece.uvic.ca/~ece350/grc_doc/ar01s12s01.html">
              Low Pass Filter</ulink> (from the <emphasis>Filters</emphasis>
              menu) between the <ulink
              url="http://www.ece.uvic.ca/~ece350/grc_doc/ar01s12s07.html">
              Rational Resampler</ulink> and the <emphasis>Throttle.
              </emphasis>Set the parameters as shown in <xref
              linkend="low_pass_dialog" xrefstyle="select: label"/>.</para>

              <para><figure id="low_pass_dialog">
                  <title>Properties of the Low Pass Filter block</title>

                  <screenshot>
                    <graphic align="center"
                             fileref="images/low_pass_dialog.png" width="50%"/>
                  </screenshot>
                </figure></para>
            </listitem>

            <listitem>
              <para>Execute the flow graph. You should see that only the
              station between +/- 5 kHz remains.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>AM Demodulation</title>

          <para>The next step is to demodulate the signal. In the case of AM,
          the baseband signal is the envelope or the magnitude of the
          modulated waveform. GNU Radio contains a <emphasis>Complex to
          Mag</emphasis> block (in the <emphasis>Type Converters</emphasis>
          category) that can be used for this purpose. Again, the use of
          complex signal representation will be dealt with in depth in the
          future.</para>

          <itemizedlist>
            <listitem>
              <para>Insert the <ulink
              url="http://www.ece.uvic.ca/~ece350/grc_doc/ar01s11s06.html">
              Complex to Mag</ulink> block between the <emphasis>Low Pass
              Filter</emphasis> and the <emphasis>Throttle </emphasis>.</para>

              <itemizedlist>
                <listitem>
                  <para>Note that the titles of some of the blocks are now red
                  and the Execute Flow Graph icon is dimmed. This indicates an
                  error. Prior to adding this block, all of the block inputs
                  and outputs were complex values. However, the output of the
                  <emphasis>Complex to Mag</emphasis> block is
                  <emphasis>Float</emphasis> (a real number). Thus, any blocks
                  following this block should be Type: Float. <emphasis
                  role="bold">Modify the</emphasis>
                  <emphasis>Throttle</emphasis> <emphasis
                  role="bold">and</emphasis> <emphasis>WX GUI FFT
                  Sink</emphasis> <emphasis
                  role="bold">accordingly</emphasis>.</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>Execute the flow graph. You should now observe the
              spectrum of the baseband signal in the <emphasis>FFT
              Sink</emphasis>. Note that since the input data type to the
              <emphasis>FFT Sink</emphasis> is Float, only the positive
              frequency spectrum is displayed.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Matching the Audio Sample Rate</title>

          <para>The next step is to listen to this demodulated waveform to
          confirm that it is in fact receiving the baseband signal.</para>

          <itemizedlist>
            <listitem>
              <para>Remove the <emphasis>Throttle</emphasis> and the
              <emphasis>FFT Blocks</emphasis>.</para>
            </listitem>

            <listitem>
              <para>Add an <emphasis>Audio Sink</emphasis> block to the output
              of the <emphasis>Complex to Mag</emphasis> block. Set the sample
              rate of the <emphasis>Audio Sink</emphasis> to 48 kHz.</para>
            </listitem>

            <listitem>
              <para>Note that the sample rate out of the <emphasis>Complex to
              Mag</emphasis> block is 64 kHz and the input to the
              <emphasis>Audio Sink</emphasis> is 48 kHz. In order to convert
              64 kHz to 48 kHz we need to divide (decimate) by 4 and multiply
              (interpolate) by 3. Insert a <emphasis>Rational
              Resampler</emphasis> between the <emphasis>Complex to
              Mag</emphasis> and <emphasis>Audio Sink</emphasis> blocks and
              set the decimation and interpolation as noted above. Also set
              its Type to <emphasis>Float-&gt;Float (Real
              Taps)</emphasis>.</para>
            </listitem>

            <listitem>
              <para>Since the output of the <emphasis>Complex to
              Mag</emphasis> is always positive, there will be a DC offset on
              the audio signal. The signal going to the audio hardware should
              not have any DC offset. Place a <ulink
              url="http://www.ece.uvic.ca/~ece350/grc_doc/ar01s12s05.html">
              DC Blocker</ulink> (in the <emphasis>Filters</emphasis>
              category) between the <emphasis>Complex to Mag</emphasis> block
              and the <emphasis>Rational Resampler</emphasis> added in the
              previous step.</para>
            </listitem>

            <listitem>
              <para>Place a <emphasis>WX GUI Scope Sink</emphasis> at the
              output of the <emphasis>Rational Resampler</emphasis> (in
              addition to the <emphasis>Audio Sink</emphasis>). Change its
              Type to Float and set its sample rate to 48000. The flow graph
              should be similar to the one shown in <xref
              linkend="am_receiver_no_tuning_no_volume"
              xrefstyle="select: label"/>.</para>

              <para><figure id="am_receiver_no_tuning_no_volume">
                  <title>Flow graph with DC Blocker and Rational Resampler for
                  rate matching</title>

                  <screenshot>
                    <graphic align="center"
                             fileref="images/am_receiver_no_tuning_no_volume.png"
                             width="75%"/>
                  </screenshot>
                </figure></para>
            </listitem>

            <listitem>
              <para>Execute the flow graph. The <emphasis>WX GUI Scope
              Sink</emphasis> should open and display the output waveform.
              However, you may not yet hear the audio from your speaker or it
              may be very distorted. This is due to the fact that the values
              of the samples going in to the <emphasis>Audio Sink</emphasis>
              block are outside the range expected by the <emphasis>Audio
              Sink</emphasis>. The <emphasis>Audio Sink</emphasis> requires
              that the sample values are between -1.0 and 1.0 in order to play
              them back through the audio hardware.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Adding a Volume Control</title>

          <itemizedlist>
            <listitem>
              <para>Insert a <ulink
              url="http://www.ece.uvic.ca/~ece350/grc_doc/ar01s08s05.html">
              Multiply Const</ulink> block from the <emphasis>Math
              Operators</emphasis> category between the <emphasis>DC
              Blocker</emphasis> and the <emphasis>Rational
              Resampler</emphasis>. Set the IO Type of the block to
              Float.</para>
            </listitem>

            <listitem>
              <para>Add a <emphasis>WX GUI Slider</emphasis> block. Set the
              parameters as shown in <xref linkend="am_volume"
              xrefstyle="select: label"/>.</para>

              <para><figure id="am_volume">
                  <title>Properties of the WX GUI Slider block</title>

                  <screenshot>
                    <graphic align="center" fileref="images/am_volume.png"
                             width="50%"/>
                  </screenshot>
                </figure></para>
            </listitem>

            <listitem>
              <para>Set the constant in the <emphasis>Multiply
              Const</emphasis> block to "volume" so that the slider controls
              it. The final flow graph is shown in <xref
              linkend="am_receiver_no_tuning"
              xrefstyle="select: label"/>.</para>

              <para><figure id="am_receiver_no_tuning">
                  <title>Complete flow graph for AM Receiver with no
                  tuning</title>

                  <screenshot>
                    <graphic align="center"
                             fileref="images/am_receiver_no_tuning.png"
                             width="75%"/>
                  </screenshot>
                </figure></para>
            </listitem>

            <listitem>
              <para>Execute the flow graph. You should now hear the
              demodulated AM signal. Stop the flowgraph.</para>
            </listitem>

            <listitem>
              <para>Double click on the <emphasis>Low Pass Filter</emphasis>.
              Note that it can also decimate. Change the decimation in the
              <emphasis>Low Pass Filter</emphasis> block to resamp_factor and
              set the sample rate back to samp_rate. Remove the
              <emphasis>Rational Resampler</emphasis> between the
              <emphasis>File Source</emphasis> and the <emphasis>Low Pass
              Filter</emphasis>. The filter now handles both operations. Test
              the receiver again.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Tuning to a desired station (channel)</title>

          <itemizedlist>
            <listitem>
              <para>Review the <ulink url="data/35015-PSK-FSK-12.pdf">section
              3.2.2 theory of tuning to a radio station</ulink>.</para>
            </listitem>

            <listitem>
              <para>Place an <emphasis>FFT Sink</emphasis> at the output of
              the <emphasis>File Source</emphasis>, leaving the rest of the
              flow graph unchanged as shown in <xref
              linkend="am_receiver_fixed_tuning"
              xrefstyle="select: label"/>.</para>
            </listitem>

            <listitem>
              <para>Execute the flow graph and observe the location of the
              other stations in the spectrum. Note that there is a fairly
              strong signal at 80 KHz (really 710 + 80 = 790 KHz).</para>
            </listitem>

            <listitem>
              <para>In order to receive this signal we need to shift it down
              to zero frequency so that it will pass through the low pass
              filter. One way to accomplish this is to multiply it by a
              sinusoid. Modify the flow graph as shown below. Add a
              <emphasis>Signal Source</emphasis> and set its parameters to
              output a cosine at a frequency of -80000. This negative
              frequency will shift the entire spectrum to the left by 80KHz.
              Use a <emphasis>Multiply</emphasis> block and move the
              <emphasis>FFT Sink</emphasis> to observe its output. Test this
              receiver.</para>

              <para><figure id="am_receiver_fixed_tuning">
                  <title>Complete flow graph for AM Receiver with tuning
                  capability</title>

                  <screenshot>
                    <graphic align="center"
                             fileref="images/am_receiver_fixed_tuning.png"
                             width="75%"/>
                  </screenshot>
                </figure></para>
            </listitem>

            <listitem>
              <para>Add another <emphasis>WX GUI Slider</emphasis> so that you
              can adjust the frequency with a slider. Set the minimum to
              (-samp_rate/2) and the maximum to (samp_rate/2). Test your flow
              graph and demonstrate that it works. You may need to adjust your
              volume slider for each station. This is because the stations are
              at varying distances away from the receiver and have different
              transmitted power. (Remember the link equation?)</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Automatic Gain Control</title>

          <para>The volume adjustment can be automated with an <ulink
          url="http://www.ece.uvic.ca/~ece350/grc_doc/ar01s01s01.html">
          Automatic Gain Control (AGC) block</ulink>. This block works by
          sampling its own output and adjusting its gain to keep the average
          output at a particular level.</para>

          <itemizedlist>
            <listitem>
              <para>Insert the <emphasis>AGC</emphasis> block (found under
              <emphasis>Level Controls</emphasis>) between the <emphasis>Low
              Pass Filter</emphasis> and the <emphasis>Complex to
              Mag</emphasis> block. The <emphasis>AGC</emphasis> will adjust
              the gain so that the sample values are always in a suitable
              range for the audio hardware. Leave the parameters at their
              default values.</para>
            </listitem>

            <listitem>
              <para>You can now remove the <emphasis>Multiply Const</emphasis>
              and volume slider. Test the receiver again. Adjust the volume to
              a comfortable level using the computer's volume control on the
              first station you hear. Now tune up and down the band and notice
              that you no longer need to adjust the volume, but the noise
              level increases for weaker stations. The radio functions the
              same as a hardware radio.</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>
    </section>

    <section>
      <title>Tutorial 4: Complex Signals and Receiving SSB</title>

      <?dbhtml stop-chunking?>

      <section>
        <title>Objectives</title>

        <para>This tutorial is a guide to receiving SSB signals. It will also
        illustrate some of the properties of complex (analytic) signals and
        show why we use them in communications systems. In this tutorial you
        will:</para>

        <itemizedlist>
          <listitem>
            <para>Use the discrete Hilbert transform to create a complex
            signal from a real signal.</para>
          </listitem>

          <listitem>
            <para>Use a frequency-translating filter to perform filtering and
            tuning in one step.</para>
          </listitem>

          <listitem>
            <para>Construct an SSB demodulator using Weaver's Method.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Complex/Analytic Signals</title>

        <itemizedlist>
          <listitem>
            <para>Review the <ulink url="data/35015-PSK-FSK-12.pdf">sections
            2.3 and 3.4 theory of analytic signals and SSB
            receivers</ulink>.</para>
          </listitem>
        </itemizedlist>

        <section>
          <title>Hilbert Transforms</title>

          <itemizedlist>
            <listitem>
              <para>Open a new flow graph in GRC. Create the simple flow graph
              shown in <xref linkend="tutorial4_sinewave"
              xrefstyle="select: label"/>. Set the Type in each of the three
              blocks to Float as you have in the past. Other than that you can
              leave all of the values at their default settings.</para>

              <para><figure id="tutorial4_sinewave">
                  <title>Simple flow graph with float data type</title>

                  <screenshot>
                    <graphic align="center"
                             fileref="images/tutorial4_sinewave.png"
                             width="75%"/>
                  </screenshot>
                </figure></para>
            </listitem>

            <listitem>
              <para>Execute the flow graph. The scope sink should open and
              display a sinusoidal signal. Convince yourself that this signal
              has the amplitude and frequency that you expect.</para>
            </listitem>

            <listitem>
              <para>Modify the flow graph by changing the Type in each of the
              three blocks to <emphasis>Complex</emphasis>. Execute the flow
              graph. Your scope plot should now display two sinusoids that are
              90° out of phase with each other. The leading (channel 1) wave
              is the I or in-phase component of the complex signal and the
              lagging (channel 2) wave is the Q or quadrature component. When
              a signal source is set to <emphasis>Complex</emphasis>, it will
              output both the I and Q components.</para>
            </listitem>

            <listitem>
              <para>Modify your flow graph as shown in <xref
              linkend="tutorial4_square" xrefstyle="select: label"/>. The
              <emphasis>Signal Source</emphasis> should be set to output a
              Square wave with a Type of Float. Thus, the first
              <emphasis>Scope Sink</emphasis> and the
              <emphasis>Throttle</emphasis> must also be set to accept Float
              values.</para>

              <para><figure id="tutorial4_square">
                  <title>Flow graph with square wave form and Hilbert
                  transform block</title>

                  <screenshot>
                    <graphic align="center"
                             fileref="images/tutorial4_square.png" width="75%"/>
                  </screenshot>
                </figure></para>
            </listitem>

            <listitem>
              <para>The <ulink
              url="http://www.ece.uvic.ca/~ece350/grc_doc/ar01s12s06.html">
              Hilbert</ulink> block is found in the
              <emphasis>Filters</emphasis> category. This block outputs both
              the real input signal and the Hilbert transform of the input
              signal as a complex signal. Leave the number of taps at its
              default setting of 64. Since the output of this block is
              complex, the second <emphasis>Scope Sink</emphasis> must be set
              to accept complex inputs.</para>
            </listitem>

            <listitem>
              <para>Execute the flow graph. Two scope plots should open. One
              should contain the square wave output from the <emphasis>Signal
              Source</emphasis> only. The other should include both the
              original square wave and its Hilbert Transform. Do you
              understand why the Hilbert transform of a square wave looks this
              way?</para>
            </listitem>

            <listitem>
              <para>As shown in <xref linkend="tutorial4_square"
              xrefstyle="select: label"/>, the <emphasis>Signal
              Source</emphasis> can be set to output a complex signal and
              display both the I and Q components. Modify the flow graph as
              shown in <xref linkend="tutorial4_square2"
              xrefstyle="select: label"/>.</para>

              <para><figure id="tutorial4_square2">
                  <title>Complex flow graph with square waveform</title>

                  <screenshot>
                    <graphic align="center"
                             fileref="images/tutorial4_square2.png"
                             width="75%"/>
                  </screenshot>
                </figure></para>
            </listitem>

            <listitem>
              <para>Set the <emphasis>Signal Source</emphasis> to output a
              complex waveform. Make sure the <emphasis>Throttle</emphasis>
              and <emphasis>Scope Sink</emphasis> are also set to
              complex.</para>
            </listitem>

            <listitem>
              <para>Execute the flow graph. Is the complex waveform displayed
              here the same as the one obtained from the Hilbert transform?
              Your answer should be NO. This is incorrect. GRC is NOT
              displaying the correct Q component of a complex square wave. The
              Hilbert transform did output the proper waveform.</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Complex Multiplication</title>

          <itemizedlist>
            <listitem>
              <para>Create the flow graph shown in <xref
              linkend="tutorial4_multiply" xrefstyle="select: label"/>. Make
              sure that all of the blocks are set to Type: Float. This flow
              graph takes two sinusoids, at frequencies of 1KHz and 10 KHz and
              multiplies them together. Using a trigonometric identity we know
              that the product of two cosines gives two cosines at the sum and
              difference frequencies of the original signals. In this case we
              expect outputs at 9 kHz (difference) and 11 kHz (sum).</para>

              <para><figure id="tutorial4_multiply">
                  <title>Flow graph with two sinusoids multiplied
                  together</title>

                  <screenshot>
                    <graphic align="center"
                             fileref="images/tutorial4_multiply.png"
                             width="75%"/>
                  </screenshot>
                </figure></para>
            </listitem>

            <listitem>
              <para>Execute the flow graph and confirm this result. Note that
              the FFT plot only shows the positive frequency spectrum when it
              is set to Type: Float. We know that for real inputs the negative
              frequency components are the same as positive frequency
              components.</para>
            </listitem>

            <listitem>
              <para>Change ALL of the blocks to Type: Complex and execute the
              flow graph again. You should now observe a single output at 11
              kHz. This is the original 10 kHz signal shifted by the 1 kHz
              signal. If we want to shift in the negative direction a
              frequency of -1000 can be used. Try this. From this example we
              see two of the primary advantages of using analytic signals. A
              signal can be shifted (sum) without creating an additional
              difference signal. Also, note that there are NO negative
              frequency components. Why is this?</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title>Single Sideband (SSB) Signals</title>

        <para>In this section you will learn one technique for demodulating
        Single Sideband Signals. The following data file will be used for the
        first part of this tutorial:</para>

        <para><ulink
        url="data/ssb_lsb_256k_complex2.dat">ssb_lsb_256k_complex2.dat</ulink></para>

        <para>This data file was recorded by a USRP set to a center frequency
        of 50.3MHz with a sample rate of 256KHz</para>

        <itemizedlist>
          <listitem>
            <para>Create a new flow graph as shown in <xref
            linkend="tutorial4_file_source" xrefstyle="select: label"/>. The
            <emphasis>File Source</emphasis> should be set to the data file
            that you just downloaded. The <emphasis>Variable</emphasis> block
            which sets the sampling rate (samp_rate) should be set to 256000
            as this is the data rate that the received signal was sampled at.
            The <emphasis>Throttle</emphasis> and <emphasis>FFT
            Sink</emphasis> can be left at their default settings.</para>

            <para><figure id="tutorial4_file_source">
                <title>Complex flow graph with file source</title>

                <screenshot>
                  <graphic align="center"
                           fileref="images/tutorial4_file_source.png"
                           width="75%"/>
                </screenshot>
              </figure></para>
          </listitem>

          <listitem>
            <para>Execute the flow graph. After the FFT Plot window opens,
            adjust the <emphasis>Ref Level</emphasis> so that the amplitude
            values start at 10 dB and set the <emphasis>dB/div</emphasis> to
            10dB/div. You should view a section of the spectrum that is 256
            kHz wide (due to the sample rate). Note that there is one signal
            visible between 40 and 60 kHz.</para>
          </listitem>

          <listitem>
            <para>When this signal was recorded, the USRP was set to a
            frequency of 50.3 MHz. Thus, the 0 kHz point on the display
            corresponds to 50.3 MHz. While the FFT Plot is displayed move the
            cursor over the signal and note the frequency along its right
            edge. It should be approximately 53 kHz. Since this is a lower
            sideband (LSB) signal, this corresponds to the carrier frequency.
            Because the "zero" frequency corresponds to 50.3 MHz, the original
            carrier frequency of signal was 50.3 MHz + 53 kHz = 50.353 MHz.
            However, now that the spectrum has been shifted down by 50.3 MHz,
            we use the carrier frequency of 53 kHz.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Frequency Translating Filter</title>

        <para>The first step in building a receiver is to use a channel filter
        to pass the signal of interest and filter out the rest of the signals
        in the band. This is done as follows</para>

        <orderedlist>
          <listitem>
            <para>First the signal of interest is shifted down to zero
            frequency as shown in <xref linkend="tutorial4_shift1"
            xrefstyle="select: label"/>.</para>

            <para><figure id="tutorial4_shift1">
                <title>Shifting a signal from passband down to
                baseband</title>

                <screenshot>
                  <graphic align="center"
                           fileref="images/tutorial4_shift1.png" width="75%"/>
                </screenshot>
              </figure></para>
          </listitem>

          <listitem>
            <para>Next a low pass filter is applied so that the other signals
            will be filtered out as shown in <xref linkend="tutorial4_shift2"
            xrefstyle="select: label"/>.</para>

            <para><figure id="tutorial4_shift2">
                <title>Using a low pass filter to remove unwanted
                signals</title>

                <screenshot>
                  <graphic align="center"
                           fileref="images/tutorial4_shift2.png" width="75%"/>
                </screenshot>
              </figure></para>
          </listitem>
        </orderedlist>

        <para>In GRC, the <emphasis>Frequency Xlating FIR Filter</emphasis>
        performs both of these operations.</para>

        <itemizedlist>
          <listitem>
            <para>Insert <ulink
            url="http://www.ece.uvic.ca/~ece350/grc_doc/ar01s12s08.html">
            Frequency Xlating FIR Filter</ulink> block between the
            <emphasis>File Source</emphasis> and the
            <emphasis>Throttle</emphasis>.</para>
          </listitem>

          <listitem>
            <para>Complete the properties window as shown in <xref
            linkend="tutorial4_freq_xlating_properties"
            xrefstyle="select: label"/>. The center frequency of 51500 will
            shift the entire spectrum down by 51500 Hz.</para>

            <itemizedlist>
              <listitem>
                <para>Note: The function indicated in the
                <emphasis>Taps</emphasis> parameter generates the taps for a
                low pass filter with a gain of 1 (in the pass band), a
                sampling rate equal to samp_rate (256 kHz), a cutoff frequency
                of 2 kHz and a transition width of 100 Hz.</para>

                <para><figure id="tutorial4_freq_xlating_properties">
                    <title>Properties dialog for Frequency Xlating FIR
                    Filter</title>

                    <screenshot>
                      <graphic align="center"
                               fileref="images/tutorial4_freq_xlating_properties.png"
                               width="50%"/>
                    </screenshot>
                  </figure></para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>Execute the flow graph. You will see that your signal has
            now moved down to the origin and is the only signal
            present.</para>
          </listitem>

          <listitem>
            <para>Now that we have located the signal of interest, there is no
            reason that we need to be concerned with so much of the adjacent
            spectrum. We can reduce the range of frequencies that are being
            processed by reducing the sample rate (decimation). Re-open the
            <emphasis>Frequency Xlating FIR Filter</emphasis> block and change
            the <emphasis>Decimation</emphasis> parameter to 8. This will
            reduce the sample rate to 256000/8 = 32000. Change the sample rate
            of the <emphasis>Throttle</emphasis> and <emphasis>FFT
            Sink</emphasis> to this new rate. What frequency range to you
            expect the FFT to display now?</para>
          </listitem>

          <listitem>
            <para>Execute the flow graph again to see if you are correct. You
            should now observe an expanded version of your signal. Select
            <emphasis>Autoscale</emphasis> on the FFT Plot so that the peaks
            of the signal are observed. Notice that after a while, the signal
            level will be reduced for a few seconds. That occurs when the
            station stops transmitting.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Using the firdes Module</title>

        <para>In the previous step, we used the firdes module of GNU Radio.
        For more information on this tool, follow the link below.</para>

        <para><ulink
        url="http://gnuradio.org/doc/doxygen/classgr_1_1filter_1_1firdes.html#details">gr::filter::firdes
        Class Reference</ulink></para>

        <para>This module is used for generating finite impulse response (FIR)
        filters in GNU Radio. There are a number of filters available that can
        be explored in the API Reference link above. Some of the commonly used
        filters are listed below. The basic usage format is <emphasis
        role="bold">firdes.filter_type(args)</emphasis> where <emphasis
        role="bold">filter_type(args)</emphasis> is one of:</para>

        <itemizedlist>
          <listitem>
            <para>band_pass(gain, sampling_freq, low_cutoff_freq,
            high_cutoff_freq, transition_width)</para>
          </listitem>

          <listitem>
            <para>band_reject(gain, sampling_freq, low_cutoff_freq,
            high_cutoff_freq, transition_width)</para>
          </listitem>

          <listitem>
            <para>complex_band_pass(gain, sampling_freq, low_cutoff_freq,
            high_cutoff_freq, transition_width)</para>
          </listitem>

          <listitem>
            <para>high_pass(gain, sampling_freq, cutoff_freq,
            transition_width)</para>
          </listitem>

          <listitem>
            <para>low_pass(gain, sampling_freq, cutoff_freq,
            transition_width)</para>
          </listitem>
        </itemizedlist>

        <para>This list indicates the minimum number of arguments required for
        the filter to be generated. Each filter can also take an argument for
        the<emphasis role="bold"> type of window</emphasis> it uses and the
        <emphasis role="bold">beta value</emphasis>. Additionally, each of
        these filter types has a "_2" version (ie: band_pass_2, low_pass_2).
        These versions take an extra parameter which specifies the stop band
        attenuation in dB. It is worthwhile to familiarize yourself with the
        usage of this module as it will be used throughout these labs.</para>
      </section>

      <section>
        <title>Weaver Demodulator</title>

        <para>Recall that the signal is a complex (analytic) signal. One
        method of demodulating SSB voice is to operate on the real and
        imaginary parts of the signal separately. The <emphasis>Complex to
        Float</emphasis> block will take a complex signal and output its real
        (re) and imaginary (im) parts separately.</para>

        <itemizedlist>
          <listitem>
            <para>Modify the flow graph to appear as shown in <xref
            linkend="tutorial4_real_imag_spectrum"
            xrefstyle="select: label"/>. The outputs of the <ulink
            url="http://www.ece.uvic.ca/~ece350/grc_doc/ar01s11s03.html">
            Complex to Float</ulink> block are both real so the <emphasis>FFT
            Sinks</emphasis> need to be changed to Type: Float.</para>

            <para><figure id="tutorial4_real_imag_spectrum">
                <title>Complex flow graph with Frequency Xlating FIR Filter
                and real outputs</title>

                <screenshot>
                  <graphic align="center"
                           fileref="images/tutorial4_real_imag_spectrum.png"
                           width="75%"/>
                </screenshot>
              </figure></para>
          </listitem>

          <listitem>
            <para>Execute the flow graph. You should now observe the spectra
            of the real and imaginary parts of the signal. Note that the
            signals extend out to 2KHz, the cutoff frequency of the
            filter.</para>
          </listitem>

          <listitem>
            <para>One method of demodulating this SSB voice signal, known as
            Weaver’s method, takes the real and imaginary part of the signal
            and processes them as shown in <xref
            linkend="tutorial4_weaver_demod" xrefstyle="select: label"/>. Use
            the <emphasis>Signal Source</emphasis> in GRC to generate the
            cosine and sine waves needed to implement this demodulator. The
            <emphasis>Multiply</emphasis> and <emphasis>Add</emphasis> blocks
            can be found in the <emphasis>Math Operators</emphasis>
            category.</para>

            <para><figure id="tutorial4_weaver_demod">
                <title>Block diagram of Weaver's method for SSB
                demodulation</title>

                <screenshot>
                  <graphic align="center"
                           fileref="images/tutorial4_weaver_demod.png"
                           width="50%"/>
                </screenshot>
              </figure></para>
          </listitem>

          <listitem>
            <para>Observe the output of the <emphasis>Add</emphasis> block
            using an <emphasis>FFT sink</emphasis>. This is the baseband
            signal that has been extracted from the modulated SSB
            signal.</para>
          </listitem>

          <listitem>
            <para>The final step is to listen to the demodulated signal. Add
            an <emphasis>Audio Sink</emphasis> as demonstrated in Tutorial 3.
            Recall that you will need a <emphasis>Rational
            Resampler</emphasis> to adjust the sampling rate to one that works
            with the <emphasis>Audio Sink</emphasis>.</para>
          </listitem>

          <listitem>
            <para>You will also need a multiplier to reduce the amplitude of
            the signal before it enters the <emphasis>Audio Sink</emphasis>.
            Find a suitable value by first observing the maximum peak on a
            scope sink and using the reciprocal of this value as the
            multiplier.</para>
          </listitem>

          <listitem>
            <para>Test your SSB receiver; you should hear the voice.</para>

            <itemizedlist>
              <listitem>
                <para>Note: It may be helpful to add a <emphasis>waterfall
                sink</emphasis> to aid in locating the signal of
                interest.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>The Weaver demodulator can also be implemented entirely with
            complex signals. Create a second SSB receiver using only complex
            signals, with conversion to real just before the audio sink. Test
            this receiver and confirm that it works in the same way as the
            receiver using real signals.</para>
          </listitem>

          <listitem>
            <para>Test this receiver using the data file below</para>

            <para><ulink
            url="./data/SDRSharp_20130920_024052Z_14190kHz_IQ.wav">SDRSharp_20130920_024052Z_14190kHz_IQ.wav</ulink></para>

            <para>This is a WAV file! To read it in GNURadio:</para>

            <itemizedlist>
              <listitem>
                <para>Add a <emphasis>Wav File Source</emphasis> and modify
                its properties as shown in <xref linkend="wav_file_properties"
                xrefstyle="select: label"/>:</para>

                <para><figure id="wav_file_properties">
                    <title>Wav File Source dialog for SSB demodulation</title>

                    <screenshot>
                      <graphic align="center"
                               fileref="images/wav_file_properties.png"
                               width="50%"/>
                    </screenshot>
                  </figure></para>
              </listitem>

              <listitem>
                <para>This WAV file was recorded using the I and Q streams for
                the L and R channels. By setting the block to have 2 output
                channels you will be able to use the full I/Q signal.</para>
              </listitem>

              <listitem>
                <para>Add a <ulink
                url="http://www.ece.uvic.ca/~ece350/grc_doc/ar01s11s10.html">
                Float To Complex</ulink> block to convert from I and Q to a
                complex signal.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>There are two SSB voice signals in this file, both are upper
            sideband (USB), whereas the first data file was lower sideband
            (LSB). The Weaver demodulator needs a small modification to work
            with USB.</para>

            <itemizedlist>
              <listitem>
                <para>Hint: Refer to the diagram above illustrating the Weaver
                Demodulator and now consider using the upper sideband</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>A data file taken using a software receiver with a wire
            antenna about 6 meters above the ground is found here:</para>

            <para><ulink
            url="./data/SDRSharp_20130919_004154Z_14053kHz_IQ.wav">
            SDRSharp_20130919_004154Z_14053kHz_IQ</ulink>.</para>

            <itemizedlist>
              <listitem>
                <para>Change the Wav File Source to read this file, and test
                your receiver using this file.</para>
              </listitem>

              <listitem>
                <para>The file contains mostly Morse code signals, no voice
                signals. Replace the fixed offset of 1500 Hz with a variable
                and control it with a WX GUI Slider. Explain what happens when
                the slider is moved and why.</para>
              </listitem>

              <listitem>
                <para>Replace the fixed bandwidth of the firdes module with a
                variable and control it with a Slider. For receiving Morse
                code signals, a bandwidth of 50-200 Hz is best.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <para>Save this flowgraph. You can modify it for use with the RTL-SDR
        receiver and listen to live Morse code and SSB signals in the
        frequency range 24.9-25.0 MHz, 27-29 MHz, 50.0-50.2 MHz. These
        frequencies will propagate over long distances via the ionosphere for
        some (not all) of the time. Other frequencies are 144.0-144.3 MHz and
        145.8-146.0 MHz.</para>
      </section>
    </section>
  </section>

  <section>
    <title>Lab 2. FM, IQ and USRP Tutorial</title>

    <para>In this section you will use the Universal Software Radio
    Peripherial (USRP) for both receiving and transmitting signals. The USRP
    is a I/Q receiver with wide bandwidth (100 MHz sampling rate),
    programmable center frequency, programmable gain and choice of sample
    rates.</para>

    <para>For detailed information on the usage of the USRP, you can find the
    data sheet and user manual as well as the range of compatible
    daughterboards at the website below</para>

    <para><ulink url="https://www.ettus.com/product/details/UN210-KIT">USRP
    N210</ulink></para>

    <para>Refer to the block diagram in <xref linkend="USRP"
    xrefstyle="select: label"/> to understand the receive path of the USRP as
    it is set up in the lab. The USRPs in the lab have the WBX daughtercard
    installed which feature a programmable attenuator, programmable local
    oscillator and analog I/Q mixer. The WBX daughterboard is an analog
    front end for the GNU Radio software. It consists of
    a local oscillator implemented as a wideband frequency synthesizer, thus
    allowing the USRP to receive signals in the range from 50 MHz to 2.2 GHz.
    The WBX Daughterboard performs complex downconversion of a 100 MHz slice
    of spectrum in the 50-2200 MHz range down to -50 to +50 MHz range for
    processing by the USRP motherboard.</para>

    <para>The main function of the USRP motherboard board is to act as a
    <ulink url="http://en.wikipedia.org/wiki/Digital_down_converter">Digital
    Downconverter (DDC)</ulink>. The motherboard implements a digital I/Q
    mixer, sample rate converter and lowpass filter. The samples are then sent
    to the host PC over a gigabit ethernet link.</para>

    <figure id="USRP">
      <title>Receive path of USRP including analog daughterboard and digital
      motherboard</title>

      <screenshot>
        <graphic align="center" fileref="images/USRP.png" width="100%"/>
      </screenshot>
    </figure>

    <para>We will first learn about FM waveform generation and reception in
    software simulation-only without the URSP, then FM receiver implemented
    with the USRP, general IQ receiver implemented with the USRP, and finally
    the USRP transmit function.</para>

    <section>
      <title>Deliverables</title>

      <para>FM flowgraphs</para>

      <itemizedlist>
        <listitem>
          <para>GRC files of FM transmitter and receiver showing FM
          transmitted waveforms, spectra and FM receiver output.</para>
        </listitem>
      </itemizedlist>

      <para>USRP with FM</para>

      <itemizedlist>
        <listitem>
          <para>Observations on practical FM receiver operation using live
          off-air signals</para>
        </listitem>

        <listitem>
          <para>bit rate of FSK signal at 142.17 MHz</para>
        </listitem>

        <listitem>
          <para>Estimate of URSP receiver dynamic range with FM signals</para>
        </listitem>
      </itemizedlist>

      <para>USRP with general IQ signals</para>

      <itemizedlist>
        <listitem>
          <para>Estimate of the USRP receiver noise figure.</para>
        </listitem>

        <listitem>
          <para>IQ receiver measured frequency offset</para>
        </listitem>

        <listitem>
          <para>Observations of I and Q at different signal levels and effect
          of dynamic range</para>
        </listitem>

        <listitem>
          <para>USRP spectrum, minimum and maximum output power</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Setup</title>

      <para>The small grey box is the USRP software‐defined radio. The USRP
      digitally downconverts the received (Rx) input signal into I/Q format
      and sends it via Ethernet to the computer. The USRP also digitally
      upconverts an I/Q signal from the computer to an RF signal at the
      transmitter (Tx) output. The USRP’s Rx input is connected to a VHF
      antenna on the ELW roof. The Tx output can be connected to the
      oscilloscope and spectrum analyzer.</para>

      <itemizedlist>
        <listitem>
          <para>Verify that the USRP at your station is connected as shown in
          <xref linkend="usrp_connect" xrefstyle="select: label"/>.</para>

          <para><figure id="usrp_connect">
              <title>Correct connections for USRP</title>

              <screenshot>
                <graphic align="center" fileref="images/usrp_connect.png"
                         width="75%"/>
              </screenshot>
            </figure></para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>FM Signal waveforms</title>

      <?dbhtml stop-chunking?>

      <section>
        <title>Objectives</title>

        <para>This tutorial is a guide to FM signal waveforms. In this
        tutorial you will learn: <itemizedlist>
            <listitem>
              <para>Theory and equations of FM signals, power spectrum,
              bandwidth, FM demodulation</para>
            </listitem>

            <listitem>
              <para>construct an FM transmitter flowgraph to generate an FM
              waveform with sinusoidal message and square wave message</para>
            </listitem>

            <listitem>
              <para>construct an FM receiver flowgraph to recover the message
              from the FM waveform.</para>
            </listitem>
          </itemizedlist></para>
      </section>

      <section>
        <title>FM flowgraphs</title>

        <para>In this section we build flowgraphs to transmit and receive FM
        signals that are simulation-only and do not (yet) use the USRP.</para>

        <itemizedlist>
          <listitem>
            <para>Review the theory on <ulink
            url="data/35015-PSK-FSK-12.pdf">section 5 FM
            Signals</ulink></para>
          </listitem>

          <listitem>
            <para>Using the following GRC files as a starting point:</para>

            <itemizedlist>
              <listitem>
                <para><ulink
                url="data/FM_Transmitter.grc">FM_Transmitter.grc</ulink></para>
              </listitem>

              <listitem>
                <para><ulink
                url="data/fm_receiver.grc">fm_receiver.grc</ulink></para>
              </listitem>
            </itemizedlist>

            <para>Carry out the steps in the <ulink
            url="data/FM_procedures.pdf">FM Tutorial</ulink></para>
          </listitem>

          <listitem>
            <para>Start GRC as was done in the previous tutorials. If GRC is
            already open, open the .grc files by selecting File-&gt;Open, or
            clicking on the Open logo, <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="images/open_logo.png"/>
                </imageobject>
              </inlinemediaobject></para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>FM Receivers</title>

      <section>
        <title>FM broadcast receiver</title>

        <para>In this section, we consider a practical FM receiver that can
        receive real off-air FM signals using the USRP.</para>

        <itemizedlist>
          <listitem>
            <para>Open the GRC patch <ulink
            url="data/wfm_rx.grc">wfm_rx.grc</ulink>.</para>
          </listitem>

          <listitem>
            <para>Observe the flowgraph comprising various blocks and
            interconnections, as well as predefined variable blocks not
            connected to anything.</para>

            <itemizedlist>
              <listitem>
                <para>Blocks with blue connection points signify complex
                signals (I and Q), and orange connection points signify real
                floating point signals.</para>
              </listitem>

              <listitem>
                <para>The USRP source block represents the USRP receiver
                hardware. This block outputs a complex signal that travels
                through various blocks (including sample rate conversion),
                eventually arriving at an audio sink.</para>
              </listitem>

              <listitem>
                <para>The audio sink represents the computer’s audio output
                hardware.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>This flowgraph implements an FM receiver.Compare this
            receiver to the FM receiver from the FM waveforms tutorial in the
            previous section.</para>

            <itemizedlist>
              <listitem>
                <para>What new blocks are added and what is their
                function?</para>
              </listitem>

              <listitem>
                <para>Which blocks are identical or perform similar
                functions?</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>Execute the flowgraph by first clicking the Generate button
            followed by the Execute button. The screen
            shows an FM receiver with a spectrum analyzer display and several
            sliders. The radio is tuned to 98.1 MHz (an FM station in
            Seattle), the RF gain is set to 7 and the AF gain is set to 300m.
            The radio can be tuned using the sliders or the keyboard arrow
            keys.</para>
          </listitem>

          <listitem>
            <para>Notice the noise level is around ‐100 dBm and the signal
            peak level is 20‐40 dB higher than that. Notice the spectrum
            analyzer covers a bandwidth of 250 KHz corresponding to the half
            the sampling rate set for the USRP source block in the
            flowgraph.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>FM data receiver</title>

        <itemizedlist>
          <listitem>
            <para>Modify the FM receiver flowgraph by replacing the FM
            demodulation block with the "homemade" FM demodulator using the
            Delay and Complex Conjugate blocks.</para>
          </listitem>

          <listitem>
            <para>Use the USRP to tune to the 2-level FSK signal at 142.17
            MHz. This signal is the control channel for the <ulink
            url="http://www.crest.ca/">CREST public safety radio
            system</ulink>.</para>
          </listitem>

          <listitem>
            <para>Observe the demodulator output on the scope. The filter
            bandwidth and decimation rate may require adjustment, since the
            bandwidth of this CREST signal is about 25 KHz compared to 200 KHz
            for FM broadcast signals.</para>
          </listitem>

          <listitem>
            <para>Check the persistence box on the scope and reduce the alpha
            to minimum. You will observe a so-called <ulink
            url="http://en.wikipedia.org/wiki/Eye_pattern">eye diagram</ulink>
            of the data, as shown in <xref linkend="eye_diagram"
            xrefstyle="select: label"/>. The eye diagram shows the number of
            milliseconds per bit. Find the bit rate (the number of bits per
            second).</para>

            <para><figure id="eye_diagram">
                <title>Eye diagram of data signal</title>

                <screenshot>
                  <graphic align="center" fileref="images/eye_diagram.png"
                           width="50%"/>
                </screenshot>
              </figure></para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Dynamic Range with FM</title>

        <itemizedlist>
          <listitem>
            <para>Review the theory of <ulink
            url="data/DynamicRange.pdf">dynamic range</ulink>. These notes
            will also be useful for subsequent sections on dynamic range with
            IQ signals and on noise figure.</para>
          </listitem>

          <listitem>
            <para>Retune the USRP to the FM broadcast station at 98.1
            MHz.</para>
          </listitem>

          <listitem>
            <para>Increase the RF gain from 7dB to 20dB or more.</para>

            <itemizedlist>
              <listitem>
                <para>Notice that the signal level increases and then suddenly
                both noise and signal jump up and the audio changes to a
                different program. What is happening is that a strong signal
                somewhere within the 40 MHz bandwidth of the USRP’s receiver
                is clipping the 14 bit A/D converter in the USRP. The 14 bit
                A/D converter has a dynamic range of about 84 dB (14 bits
                times 6 dB per bit), so a signal above about ‐100 dBm + 84 dB
                = ‐16 dBm will clip the converter. With the RF gain set to
                around 20 dB, the receiver becomes non‐linear and the audio
                from the strong signal is cross‐modulating on top of the
                signal at 98.1 MHz.</para>
              </listitem>

              <listitem>
                <para>Cross‐modulation can be shown to occur by modelling the
                non‐linear receiver as having the output:</para>

                <para><inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="images/eqn_cross_modulation.png"/>
                    </imageobject>
                  </inlinemediaobject> (ignore higher order terms),</para>

                <para>where s(t) is the sum of the strong and the weak
                signal.</para>
              </listitem>

              <listitem>
                <para>Reduce the RF gain and notice that the original signal
                is restored. Next, we will look for this strong signal.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>Tune the FM receiver to 101.9 MHz (the local UVic radio
            station CFUV). Notice that the signal level is much higher (close
            to ‐30 dBm). Now increase the RF gain to at least 20 dB and
            observe the signal level can be increased to above ‐16 dBm,
            however, the audio is not changed. This signal at 101.9 MHz was
            causing the clipping.</para>
          </listitem>

          <listitem>
            <para>Experiment more with the FM receiver. Notice that many
            signals can be received, FM signals are spaced every 0.2 MHz with
            an odd last digit, from 88.1 MHz up to 107.9 MHz.</para>
          </listitem>
        </itemizedlist>

        <!--<para>Write a brief one‐paragraph summary of your observations of the
        FM receiver and what you learned.</para>-->
      </section>
    </section>

    <section>
      <title>I/Q Receiver</title>

      <section>
        <title>I/Q Receiver output</title>

        <itemizedlist>
          <listitem>
            <para>Review <ulink url="data/35015-PSK-FSK-12.pdf">sections 1.2
            and 1.3 IQ theory</ulink></para>
          </listitem>

          <listitem>
            <para>Open the GRC patch <ulink
            url="data/ra5.grc">ra5.grc</ulink>. This flowgraph implements the
            mathematics on the last page of the IQ theory document.</para>

            <itemizedlist>
              <listitem>
                <para>The USRP source does IQ downconversion on the WBX
                daughtercard and outputs the complex signals I(t) +
                jQ(t).</para>
              </listitem>

              <listitem>
                <para>This output is connected to 4 blocks that extract the
                magnitude, phase, real and imaginary parts of the complex
                signal, as well as an XY scope.</para>
              </listitem>

              <listitem>
                <para>The USRP source is tuned to a fixed frequency of 200
                MHz, i.e. the LO frequency synthesizer in the WBX daughtercard
                is set to 200 MHz.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>Double‐click the USRP source block to bring up a window with
            all of the USRP parameters. This general I/Q receiver is set up to
            receive a signal in a range around 200 MHz at level -40 dBm from
            the signal generator at the back of the lab.</para>
          </listitem>

          <listitem>
            <para>Execute the flowgraph. Observe the Output Display window
            with 5 tabs labelled <emphasis role="bold">Scope Plot, Magnitude,
            Phase, Real</emphasis> and <emphasis
            role="bold">Imaginary</emphasis>.</para>

            <itemizedlist>
              <listitem>
                <para>The Scope Plot tab should show a circle</para>
              </listitem>

              <listitem>
                <para>Magnitude will show a (noisy) DC level</para>
              </listitem>

              <listitem>
                <para>Phase will show a phase ramp wrapping between -π and
                π</para>
              </listitem>

              <listitem>
                <para>Real and Imaginary will show (noisy) sine waves.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>The scope autorange may need to be switched off and the time
            base adjusted to get good displays.</para>
          </listitem>

          <listitem>
            <para>Determine the frequency
            <emphasis>f<subscript>b</subscript></emphasis> of the sine waves
            using the Phase display as well as the Real and Imaginary displays
            by placing your mouse cursor over the scope plot to show the time
            offset at different points on the waveform. This frequency
            <emphasis>f<subscript>b</subscript></emphasis> represents the
            offset between the received RF signal
            <emphasis>f<subscript>c</subscript></emphasis> and the USRP local
            oscillator <emphasis>f<subscript>LO</subscript></emphasis>, so
            that</para>

            <para><emphasis>f<subscript>b</subscript> </emphasis> =
            <emphasis>f<subscript>c</subscript> -
            f<subscript>LO</subscript></emphasis></para>
          </listitem>

          <listitem>
            <para>Confirm that <emphasis>f<subscript>b</subscript></emphasis>
            is as expected.</para>
          </listitem>

          <listitem>
            <para>The USRP source block has the <emphasis>clock
            source</emphasis> set to use an <emphasis>external</emphasis> 10
            MHz clock reference frequency, and the same external reference is
            used for the signal generator. Thus the frequency difference
            between the USRP source block (local oscillator) and signal
            generator RF frequency will be observed to be exactly as expected
            from their respective frequency settings.</para>

            <itemizedlist>
              <listitem>
                <para>If we change the USRP source block to use an
                <emphasis>internal</emphasis> clock reference, then expect to
                observe some frequency error between the signal generator and
                the USRP frequency settings as they are running from
                independent oscillators.</para>
              </listitem>

              <listitem>
                <para>Try changing the USRP clock source to
                <emphasis>internal</emphasis> and repeat the frequency
                measurement of the I and Q outputs.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Dynamic range with IQ signals</title>

        <itemizedlist>
          <listitem>
            <para>Ask the TA to vary the 200 MHz signal generator level from
            ‐100 dBm to 0 dBm in 20 dB steps (or do it yourself is there are
            no other groups working).</para>
          </listitem>

          <listitem>
            <para>Observe and describe how the signals look at each signal
            level, and explain why.</para>

            <itemizedlist>
              <listitem>
                <para>The waveform appearance results from clipping in the 2
                ADCs (one ADC for I, one ADC for Q).</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Noise figure</title>

        <itemizedlist>
          <listitem>
            <para>Review <ulink url="data/350link4.pdf">link budget
            notes</ulink> with particular attention to <emphasis
            role="bold">equation (14)</emphasis>.</para>
          </listitem>

          <listitem>
            <para>When you tune the receiver to a frequency where there is no
            station broadcasting, there is still a residual noise floor
            visible on the spectrum display. The noise level can be estimated
            by looking at the display and observing the level in dBm (dB
            relative to one milliwatt). This is thermal noise that is
            calculated from the formula</para>

            <para><emphasis>P<subscript>noise</subscript> =
            kT(S/N)WF</emphasis></para>

            <para>where</para>

            <itemizedlist>
              <listitem>
                <para>k is Boltzmann's constant</para>
              </listitem>

              <listitem>
                <para>T is the noise temperature, typically 290 degrees
                Kelvin</para>
              </listitem>

              <listitem>
                <para>W is the bandwidth in Hz and</para>
              </listitem>

              <listitem>
                <para>F is a dimensionless noise figure representing imperfect
                amplifiers.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>By substituting values for <emphasis>k</emphasis> and
            <emphasis>T</emphasis> and taking logs of both sides of this
            formula, we can write in dB:</para>

            <para>P<subscript>noise</subscript> = -228.6 + T + (S/N) + W +
            F.</para>
          </listitem>

          <listitem>
            <para>Estimate the noise figure of the receiver based on the noise
            level in dBm on the computer spectrum display and the receiver
            bandwidth of 250 KHz.</para>

            <itemizedlist>
              <listitem>
                <para>All the variables in the noise figure equation except F
                are known or can be measured, so the equation can be solved
                for F.</para>
              </listitem>

              <listitem>
                <para>The specified value for the URSP with WBX board is 5.5
                dB.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>Carrier Wave Transmitter</title>

      <para>In this section, we test the transmit functions of the USRP that
      we can use later when building a communications system. We will observe
      the transmitted spectrum, minimum and maximum power level in dBm (dB
      relative to one milliwatt). You will use both the osciloscope and the
      spectrum analyzer at your bench to view and measure the output from the
      USRP transmitter.</para>

      <itemizedlist>
        <listitem>
          <para>Review the theory on <ulink
          url="./data/35015-PSK-FSK-12.pdf">section 1.4 Spectrum
          Analyzers</ulink>. For more detailed information, you may also wish
          to review <ulink url="./data/5965-7920E.pdf">Spectrum Analyzer
          Basics</ulink> and <ulink url="./data/spec_analyzer.pdf">The Basics
          of Spectrum Analyzers</ulink>. The concepts presented here will be
          applicable to any spectrum analyzer you may use in your
          career.</para>
        </listitem>

        <listitem>
          <para>Open the GRC patch <ulink
          url="data/tx_carrier.grc">tx_carrier.grc</ulink>.</para>
        </listitem>

        <listitem>
          <para>Observe that the USRP sink center frequency is set to 50MHz.
          This block represents the USRP transmitter hardware.</para>
        </listitem>

        <listitem>
          <para>Observe that the sine and cosine signal sources are configured
          for 10 kHz.</para>
        </listitem>

        <listitem>
          <para>Connect the USRP Tx output to the spectrum analyzer and
          execute the flowgraph. A scope display will come up along with three
          buttons that allow you to select different values for Q(t).</para>
        </listitem>

        <listitem>
          <para>Set the spectrum analyzer’s center frequency to 50 MHz and the
          span to 50 kHz by using the FREQUENCY and SPAN buttons. Adjust the
          LEVEL as necessary.</para>
        </listitem>

        <listitem>
          <para>What do you observe on the spectrum analyzer display with Q(t)
          = 0? Try the other two options for Q(t). What do you observe on the
          spectrum analyzer?</para>
        </listitem>

        <listitem>
          <para>What is the minimum and maximum signal power output from the
          USRP? The USRP output power level can be set via the dialog box
          obtained by double‐clicking on the USRP sink in the flowgraph.
          Measure the power using both the oscilloscope and spectrum analyzer
          and verify they are the same.</para>

          <itemizedlist>
            <listitem>
              <para>Note: Recall from your circuit theory that the output
              power is relative to the load impedance. On the spectrum
              analyzer, the input is 50Ω, which matches the expected impedance
              of a typical antenna. The input to the scope on the other hand
              is high impedance, effectively open circuit, to prevent damage
              to the internal circuits. To compare measurement on the scope to
              that of the spectrum analyzer, the line from the USRP
              transmitter should be terminated with a 50Ω terminator.
              Alternatively, some circuit theory can be applied to determine
              the equivalent power output measured across an open circuit and
              a 50Ω load.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Lab 3. FLEX Frame Synchronizer</title>

    <para>In this section, you will capture some frames from the <ulink
    url="http://en.wikipedia.org/wiki/FLEX_(protocol)">FLEX</ulink> pager
    network and locate the frame synchronization word. The sync word allows
    the decoder to synchronize with the beginning of the message bits. A
    standard method for detecting the sync word is to correlate the incoming
    signal against the sync word.</para>

    <para>You will also try to decode some of the message bits.</para>

    <para>Review the theory on <ulink url="./data/FrameSync.pdf">Frame
    Synchronization</ulink>. Further description of frame synchronization is
    in the text <emphasis>CR Johnson, WA Sethares, Software Receiver Design,
    Cambridge, 2011 </emphasis>chapter 8, section 8.5.</para>

    <section>
      <title>Deliverables</title>

      <itemizedlist>
        <listitem>
          <para>Working flowgraph showing how the FLEX frames were
          captured.</para>
        </listitem>

        <listitem>
          <para>Code which prints out the start time of each sync word found
          in a file.</para>
        </listitem>

        <listitem>
          <para>A list of the 16 frame times that you extracted from the test
          file.</para>
        </listitem>

        <listitem>
          <para>A list of the frame times that you extracted from a file you
          captured of the air.</para>
        </listitem>

        <listitem>
          <para>A description of your observations about the FLEX protocol and
          the approach you would take to decode actual message text.</para>
        </listitem>

        <listitem>
          <para>Identifying two different FSK signals and measuring their
          symbol rates.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Frame Capture</title>

      <para>There is a relatively strong FLEX pager network signal around
      929.66 MHz. The FLEX signal is multi-level Frequency-Shift Keying, so an
      FM demodulator is needed to detect the data.</para>

      <itemizedlist>
        <listitem>
          <para>Create a flowgraph to receive this signal, starting with the
          IQ receiver from the previous section with a waterfall added.</para>
        </listitem>

        <listitem>
          <para>Set the USRP receive gain high (30dB), tune your receiver to
          this frequency and view the signal on the waterfall display. You may
          need to use the <emphasis>Autoscale</emphasis> function on the
          waterfall for a better view.</para>

          <itemizedlist>
            <listitem>
              <para>Note: If you are not able to find the FLEX signal, there
              is a <ulink url="./data/FLEX_bits.wav">FLEX file source</ulink>
              that can be used instead. This file is the demodulated FLEX
              signal. It can be observed in your flowgraph using a
              <emphasis>Scope Sink</emphasis>, but does not require any
              further processing from Gnu Radio Companion. If using this file,
              you may skip to Section 4.3</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>What do you observe? With some patience, you should
          periodically see two strong lines that are 9.6 kHz apart with other
          weaker lines on either side (harmonics) as shown in <xref
          linkend="flex_waterfall" xrefstyle="select: label"/>. 9.6 kHz is the
          frequency shift used by the FLEX signal. The signal actually
          switches rapidly between the two frequencies, although the
          resolution of the waterfall is not fine enough to show this
          detail.</para>

          <para><figure id="flex_waterfall">
              <title>Modulated FLEX pager signal in passband</title>

              <screenshot>
                <graphic align="center" fileref="images/flex_waterfall.png"
                         width="75%"/>
              </screenshot>
            </figure></para>
        </listitem>

        <listitem>
          <para>You may also observe that the paging signal occurs in shorter
          bursts, as shown in <xref linkend="flex_waterfall2"
          xrefstyle="select: label"/>.</para>

          <para><figure id="flex_waterfall2">
              <title>Alternate type of FLEX pager signal in passband</title>

              <screenshot>
                <graphic align="center" fileref="images/flex_waterfall2.png"
                         width="75%"/>
              </screenshot>
            </figure></para>
        </listitem>

        <listitem>
          <para>Although FLEX can use a variety of modulation schemes, the
          sync word is always sent as 2-level FSK at 1600 bits per second.
          Create an FM discriminator just as you did in the previous lab to
          demodulate the FLEX signal.</para>
        </listitem>

        <listitem>
          <para>View the demodulated output on the scope. You should now see
          what looks like a digital waveform as shown in <xref
          linkend="flex_bits" xrefstyle="select: label"/>.</para>

          <para><figure id="flex_bits">
              <title>Demodulated FLEX pager signal as digital waveform</title>

              <screenshot>
                <graphic align="center" fileref="images/flex_bits.png"
                         width="75%"/>
              </screenshot>
            </figure></para>
        </listitem>

        <listitem>
          <para>Save the demodulated output to a file in one of the following
          ways:</para>

          <orderedlist>
            <listitem>
              <para>In binary format using a <emphasis>File Sink</emphasis> at
              any sample rate. This file can be read in MATLAB using the
              <ulink
              url="http://www.mathworks.com/help/matlab/ref/fread.html">fread</ulink>
              function or in any other language of your choice.</para>
            </listitem>

            <listitem>
              <para>In WAV format using a <emphasis>Wav File Sink</emphasis>
              at one of the accepted sample rates for WAV files (48kHz is
              suggested). WAV files can be read in MATLAB using the <ulink
              url="http://www.mathworks.com/help/matlab/ref/wavread.html">wavread</ulink>
              function or viewed in Audacity.</para>
            </listitem>
          </orderedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Bit and Frame Sync</title>

      <itemizedlist>
        <listitem>
          <para>To find the location of the marker sequence in this data
          waveform stored in a file requires two steps:</para>

          <orderedlist>
            <listitem>
              <para>find the bit stream from the waveform</para>
            </listitem>

            <listitem>
              <para>find the marker in the bit stream</para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>The bit stream can be found from the waveform by visual
          inspection of the waveform. In the example waveform in <xref
          linkend="flex_bits" xrefstyle="select: label"/> of the previous
          subsection, the data bits are</para>

          <para>0011110110110101010010010</para>

          <para>where we have written 0 instead of -1 for convenience.</para>
        </listitem>

        <listitem>
          <para>A good way to examine visually examine the file from Section
          4.2 is to open it in Audacity (note that this is only possible for a
          WAV file). It is also possible in Matlab, although it is worse for
          visual inspection.</para>
        </listitem>

        <listitem>
          <para>To determine a bitstream by computer requires a bit more
          thought. In this case, since the USRP is phase locked to GPS, there
          is an integer number of samples per bit, which makes the
          waveform-to-bits conversion much easier. One method to find the
          locations of the sync word by computer is as follows:</para>

          <orderedlist>
            <listitem>
              <para>Visually examine the file either in Audacity or in Matlab
              to determine the location of the first sync word. The sync word
              you should look for in this case is 0xA6C6AAAA or the 32-bit
              sequence:</para>

              <para>1010 0110 1100 0110 1010 1010 1010 1010</para>
            </listitem>

            <listitem>
              <para>Either copy/paste in Audacity or create a new array in
              Matlab to isolate the sync word.</para>
            </listitem>

            <listitem>
              <para>Now the isolated sync word needs to be cross-correlated
              against the entire bitstream. If you are confident in your
              ability to do this programatically you can write your own
              program to do this either in Matlab or the language of your
              choice. Otherwise, you may use the following Matlab
              script:</para>

              <para><ulink url="data/frame_sync.m">frame_sync.m</ulink></para>
            </listitem>

            <listitem>
              <para>You should now have a list of times for when each syncword
              starts.</para>

              <itemizedlist>
                <listitem>
                  <para>If you were able to create your own file in Section
                  4.2, you can visually determine whether the start times are
                  correct, and adjust your code if they are not.</para>
                </listitem>

                <listitem>
                  <para>If you were using the previously generated <ulink
                  url="./data/FLEX_bits.wav"> FLEX_bits.wav</ulink>, it
                  contains 16 frames, with the first one starting at 0.7126
                  seconds and the last one starting at 30.7126 seconds.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>How much time between frames (sync words)? Is there any larger
          pattern?</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Decoding text</title>

      <itemizedlist>
        <listitem>
          <para>Try to decode some text, the letters and numbers are not
          encrypted. Some hints may be found <ulink
          url="http://scholar.lib.vt.edu/theses/available/etd-10597-161936/unrestricted/THESIS.PDF">here</ulink>
          , pages 4-11.</para>

          <itemizedlist>
            <listitem>
              <para>Note: It is not expected that successful decoding can be
              completed during the lab period, however, the approach you would
              take with your TA.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Other data signals</title>

      <para>A data file, <ulink url="./data/fsk.dat">fsk.dat</ulink>, was
      recorded at a sample rate of 48 kHz containing complex samples of two
      FSK signals. One signal is at an offset of -10 kHz while the other is at
      +15 kHz. One signal has two tones while the other uses eight
      tones.</para>

      <itemizedlist>
        <listitem>
          <para>Use a complex <emphasis>File Source</emphasis> block to read
          the file and your FM discriminator from the previous section to
          demodulate the signals one at a time.</para>
        </listitem>

        <listitem>
          <para>For each signal, determine:</para>

          <itemizedlist>
            <listitem>
              <para>Which signal is at which offset?</para>
            </listitem>

            <listitem>
              <para>What is the symbol rate of each signal?</para>
            </listitem>
          </itemizedlist>

        </listitem>

        <listitem>
          <para>The demodulated two-tone signal should look similar to the one
          in <xref linkend="fsk2level" xrefstyle="select: label"/>.</para>

          <para><figure id="fsk2level">
              <title>Demodulated two-tone FSK signal</title>

              <screenshot>
                <graphic align="center" fileref="images/fsk2level.png"
                         width="75%"/>
              </screenshot>
            </figure></para>
        </listitem>

        <listitem>
          <para>The demodulated eight-tone signal should look similar to the
          one in <xref linkend="fsk8level" xrefstyle="select: label"/>.</para>

          <para><figure id="fsk8level">
              <title>Demodulated 8-tone FSK signal</title>

              <screenshot>
                <graphic align="center" fileref="images/fsk8level.png"
                         width="75%"/>
              </screenshot>
            </figure></para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Lab 4. PSK systems</title>

    <section>
      <title>Deliverables</title>

      <itemizedlist>
        <listitem>
          <para>modified complex BPSK flowgraph</para>
        </listitem>

        <listitem>
          <para>block diagram version of modified complex BPSK flowgraph
          showing a mathematical representation of the signal at each
          point</para>
        </listitem>

        <listitem>
          <para>a comment on the difference between two methods of pulse
          shaping: using square waves versus using an impulse train as input
          to a pulse shaping filter.</para>
        </listitem>

        <listitem>
          <para>a few sentences explaing your observations with non-zero
          frequency offset</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Testing a PSK system</title>

      <para>In this section, we modify a complete PSK transmitter-receiver
      system assuming a perfect channel and perfect synchronization
      (timing).</para>

      <para>Start by reviewing the theory in the text chapters 6 (pulse
      shaping) and 7 (PSK) and the GRC patches therein. The following GRC
      patches (flowgraphs) will help you understand how BPSK and QPSK are
      generated:</para>

      <itemizedlist>
        <listitem>
          <para>Real BPSK: <ulink
          url="./data/bpsk_txrx_real.grc">bpsk_txrx_real.grc</ulink></para>
        </listitem>

        <listitem>
          <para>Complex BPSK: <ulink
          url="./data/bpsk_txrx_complex.grc">bpsk_txrx_complex.grc</ulink></para>
        </listitem>

        <listitem>
          <para>Real QPSK: <ulink
          url="./data/qpsk_txrx_real.grc">qpsk_txrx_real.grc</ulink></para>
        </listitem>

        <listitem>
          <para>Complex QPSK: <ulink
          url="./data/qpsk_txrx_complex.grc">qpsk_txrx_complex.grc</ulink></para>
        </listitem>
      </itemizedlist>

      <para>Observe that for each of these 4 flowgraphs, the signal source is
      a square wave (not an impulse train) representing a 1010... data pattern
      represented at the given sample rate. What is the bit rate and the
      symbol rate in each case? How many samples per symbol? Observe how the
      signal constellation rotates when the frequency offset is not equal to
      zero.</para>

      <para>We now modify the Complex BPSK flowgraph to use a random data
      pattern and a non-square pulse shape.</para>

      <itemizedlist>
        <listitem>
          <para>Replace the signal source with a random data pattern generated
          using a generalized linear feedback shift register (<emphasis>GLFSR
          source</emphasis>).</para>
        </listitem>

        <listitem>
          <para>The GLFSR source outputs one sample per bit. Use a
          <emphasis>Repeat</emphasis> block so that each data bit generates a
          square pulse. What interpolation factor should be chosen and
          why?</para>
        </listitem>

        <listitem>
          <para>Add a scope sink at the output of the
          <emphasis>Repeat</emphasis> block to observe the square
          pulses.</para>
        </listitem>

        <listitem>
          <para>Add a low pass filter to shape the square pulses into more
          rounded pulses. What is the advantage of using a rounded pulse
          rather than a square pulse?</para>
        </listitem>

        <listitem>
          <para>Add a scope sink at the output of the low pass filter to
          observe the transmitted eye diagram with rounded pulses.</para>
        </listitem>

        <listitem>
          <para>Add a scope sink at the output of the receiver to observe the
          received eye diagram. Observe how the received eye diagram changes
          as the frequency offset is changed from zero. Explain your
          observations.</para>
        </listitem>

        <listitem>
          <para>Add a scope sink in XY mode at the output of the receiver to
          observe the received signal constellation. This constellation is not
          sampled, so it includes the entire waveform, not just the points
          where the data is sampled. Observe how the constellation changes as
          the frequency offset is changed from zero. Explain your
          observations.</para>
        </listitem>
      </itemizedlist>

      <para>In the following steps, we create the pulse shape using impulse
      inputs instead of square wave inputs. This method enables the use of an
      FIR pulse shaping filter such as the <emphasis>Root Raised Cosine
      Filter</emphasis> whose coefficients (taps) exactly represent the
      desired pulse shape.</para>

      <itemizedlist>
        <listitem>
          <para>The GLFSR source outputs one sample per bit. We want to create
          an impulse train waveform with many samples per bit that will be the
          input to a pulse shaping filter.</para>
        </listitem>

        <listitem>
          <para>Use an <emphasis>Interpolating FIR filter</emphasis> so that
          each data bit generates an impulse. The interpolation factor should
          be chosen to be the same as before. Why? The filter has only one tap
          set to be the same as the interpolation factor.</para>
        </listitem>

        <listitem>
          <para>Add a scope sink at the output of the <emphasis>Interpolating
          FIR filter</emphasis> to observe the impulse train waveform.</para>
        </listitem>

        <listitem>
          <para>Add an FIR low pass filter to shape the impulses into pulses
          with reasonable pulse shape.</para>
        </listitem>

        <listitem>
          <para>Replace the Interpolating FIR filter and the FIR low pass
          filter with a <emphasis>Root Raised Cosine Filter</emphasis>. The
          input to the RRC filter is at the symbol rate (one sample per bit).
          The filter gain should be set to be the same number as the
          interpolation factor. Set the RRC filter length to an appropriate
          value, try different values and observe the effect.</para>
        </listitem>

        <listitem>
          <para>Add a scope sink at the output of the <emphasis>Root Raised
          Cosine Filter</emphasis> to observe the transmitted eye
          diagram.</para>
        </listitem>

        <listitem>
          <para>Add a scope sink at the output of the receiver to observe the
          received eye diagram. Observe how the received eye diagram changes
          as the frequency offset is changed from zero.</para>
        </listitem>

        <listitem>
          <para>Add a scope sink in XY mode at the output of the receiver to
          observe the received signal constellation. Observe how the
          constellation changes as the frequency offset is changed from zero.
          Explain your observations.</para>
        </listitem>
      </itemizedlist>

      <para>Optional: repeat the above changes using the Complex QPSK
      flowgraph.</para>

      <para>Optional modifications: add a noise source, receiver filter and
      bit error rate counter</para>
    </section>
  </section>
</article>
